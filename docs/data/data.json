{
    "cheatSheets": [
        {
            "title": "Swift",
            "tags": [
                "Apple",
                "iOS",
                "iPadOS"
            ],
            "categories": [
                "Programming"
            ],
            "background": "#eb4e38",
            "icon": "https://www.svgrepo.com/show/512939/swift-146.svg",
            "intro": "This cheat sheet provides examples of using Swift that cover basic Swift knowledge, control flow etc.",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "- [Swift Documentation (Official)](https://www.swift.org/documentation/) _(swift.or)_\n- [Swift Programming Language (Official)](https://docs.swift.org/swift-book/) _(swift.or)_\n- [One-Stop Quick Reference for Swift Developers](https://swiftly.dev/) _(swiftly.dev)_\n\n### Variable\n\n```swift\nvar score = 0  // Variable\nlet pi = 3.14  // Constant\n\nvar greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n\nvar numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// prints \"9\"\n```\n\n### Type annotations\n\n```swift\nvar greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\nvar price: Double = 8.99\n```\n\n### Arithmetic operators\n\n- `+` Add\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `%` Remainder\n\n----\n\n```swift\nvar x = 0\nx = 4 + 2 // x is now 6\nx = 4 - 2 // x is now 2\nx = 4 * 2 // x is now 8\nx = 4 / 2 // x is now 2\nx = 4 % 2 // x is now 0\n```\n\n----\n\n- `+=` Adds and assigns sums\n- `-=` subtract and assign the difference\n- `*=` Multiplication and assignment\n- `/=` Divide and assign quotient\n- `%=` Divide and assign remainder\n\n#### Compound Assignment Operators\n\n```swift\nvar numberOfDogs = 100\nnumberOfDogs += 1\nprint(\"There are \\(numberOfDogs) Dalmatians!\")\n\n// print: There are 101 Dalmatians!\n```\n\n### String interpolation\n\n```swift\nvar apples = 6\nprint(\"I have \\(apples) apples!\")\n\n// print: I have 6 apples!\n```\n\n### Multi-line string\n\n```swift\nlet myLongString = \"\"\"\nSwift?\nThis is my favorite language!\nYeah!\n\"\"\"\n```\n\n### Code Comments\n\n```swift\n// This line represents a comment in Swift.\n\n/*\nThis is all commented out.\nNone will run!\n*/\n```\n\n### Form a tuple \n\n```swift\nlet player = (\"Maya\", 5, 150)\n\nprint(player) // (\"Maya\", 5, 150)\nprint(\"\\(player.0): level \\(player.1), \\(player.2) pts\") // Maya: level 5, 150 pts\n```\n\n### Decompose tuple\n\n```swift\nlet player = (name: \"Maya\", level: 5)\nlet (currentName, curLevel) = player\nprint(\"\\(currentName): level \\(curLevel)\")\n// print: Maya: level 5\n```\n\n### Special comment syntax (MARK)\n\n```swift\n// MARK: -view settings\n```\n`MARK` can be used to display comments in the column\n\n### Special comment syntax (TODO)\n\n```swift\n// TODO: update logic to accommodate data changes\n```\n\n`TODO` is used to display reminders of things that need to be done\n\n### Special Comment Syntax (FIXME)\n\n```swift\n// FIXME: Fix buggy behavior when making changes to existing entries\n```\n\n`FIXME` is used to display reminders about things that need to be fixed"
                },
                {
                    "title": "Variable",
                    "content": "### Variable declaration\n\nVariables are declared with `var`:\n\n```swift\nvar greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n```\n\nFor clarity, variable declarations can contain type annotations:\n\n```swift\nvar greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\n```\n\nVariables are mutable. Their values be changed:\n\n```swift\nvar numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// print \"9\"\n```\n\n### Constants\n\nConstants are declared with `let`:\n\n```swift\nlet greeting = \"Hello\"\nlet numberOfToys = 8\nlet isMorning = true\n```\n\nFor clarity, constant declarations can contain type annotations:\n\n```swift\nlet greeting: String = \"Hello\"\nlet numberOfToys: Int = 8\nlet isMorning: Bool = true\n```\n\nConstants are immutable. Their values be changed:\n\n```swift\nlet numberOfToys: Int = 8\nnumberOfToys += 1\n// Error: numberOfToys is immutable\n```\n\n### Computed variables (get and set) \n\n```swift\nimport Foundation\n\nlet df = DateFormatter()\ndf.dateFormat = \"d MMMM yyyy\"\n\nguard var birth = df.date(from: \"5 June 1999\") else {\n    print(\"Date is not valid\")\n    return\n}\n\nvar age: Int {\n    Calendar.current\n        .dateComponents([.year],\n                        from: birth,\n                        to: Date()).year!\n}\n\nprint(age) // 23\nguard let birth2 = df.date(from: \"5 June 2002\") else {\n    print(\"Date is not valid\")\n    return\n}\nbirth = birth2\nprint(age) // 20\n```\n\nIn the example below, distanceInFeet has a `getter` and a `setter`. Because of the `setter`, the `getter` requires the keyword `get`:\n\n```swift\nvar distanceInMeters: Float = 100\n\nvar distanceInFeet: Float {\n  get {\n    distanceInMeters *3.28\n  }\n  set(newDistance) {\n    distanceInMeters = newDistance /3.28\n  }\n}\n\nprint(distanceInMeters) // 100.0\nprint(distanceInFeet)   // 328.0\n\ndistanceInFeet = 250\nprint(distanceInMeters) // 76.21951\nprint(distanceInFeet)   // 250.0\n\ndistanceInMeters = 800\nprint(distanceInMeters) // 800.0\nprint(distanceInFeet)   // 2624.0\n```\n\n### willSet \n\n```swift\nvar distance = 5 {\n  willSet {\n    print(\"The distance will be set\")\n  }\n}\n\ndistance = 10 // print: distance will be set\n```\n\nThe new value can be accessed in `willSet`:\n\n```swift\nvar distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set \\(newDistance)\")\n  }\n}\n\ndistance = 10 // print: distance will be set to 10\n```\n\n`willSet` can be used to execute some code before setting the variable value\n\n### didSet\n\n```swift\nvar distance = 5 {\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10 // print: distance will be set to 10\n              // print: its old value is: 5\n```\n\n### willSet and didSet\n\n```swift\nvar distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set to \\(newDistance)\")\n  }\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10\n```"
                },
                {
                    "title": "Conditions",
                    "content": "### if statement\n\n```swift\nvar halloween = true\nif halloween {\n  print(\"Trick or treat!\")\n}\n// print: Trick or treat!\nif 5 > 3 {\n  print(\"5 is greater than 3\")\n} else {\n  print(\"5 is not more than 3\")\n}\n// output: \"5 is greater than 3\"\n```\n\n### else statement\n\n```swift\nvar turbulence = false\n\nif turbulence {\n  print(\"Please sit down.\")\n} else {\n  print(\"You are free to move around.\")\n}\n// print: You are free to move around.\n```\n\n### else if statement\n\n```swift\nvar weather = \"rainy\"\nif weather == \"sunny\" {\n  print(\"Get some sunscreen\")\n} else if weather == \"rainy\" {\n  print(\"Take an umbrella\")\n} else if weather == \"snowing\" {\n  print(\"Put on your snow boots\")\n} else {\n  print(\"Invalid weather\")\n}\n// print: take an umbrella\n```\n\n### Comparison Operators\n\n```swift\n5 > 1      // true\n6 < 10     // true\n2 >= 3     // false\n3 <= 5     // true\n\"A\" == \"a\" // false\n\"B\" != \"b\" // true\n```\n\n-`<`  less than\n-`>`  greater than\n-`<=` less than or equal to\n-`>=` greater than or equal to\n-`==` is equal to\n-`!=` is not equal to\n\n### Ternary conditional operator\n\n```swift\nvar driverLicense = true\n\ndriverLicense\n    ? print(\"driver seat\") : print(\"passenger seat\")\n// print: driver's seat\n```\n\n### switch statement\n\n```swift\nvar secondaryColor = \"green\"\n\nswitch secondaryColor {\n  case \"orange\":\n    print(\"A mixture of red and yellow\")\n  case \"purple\":\n    print(\"A mix of red and blue\")\n  default:\n    print(\"This may not be a secondary color\")\n}\n// print: mix of blue and yellow\n```\n\n### switch statement: interval matching\n\n```swift\nlet year = 1905\nvar artPeriod: String\n\nswitch year {\n  case 1860...1885:\n    artPeriod = \"Impressionism\"\n  case 1886...1910:\n    artPeriod = \"Post-Impressionism\"\n  default:\n    artPeriod = \"Unknown\"\n}\n// print: post-impressionism\n```\n\n### switch statement: composite case\n\n```swift\nlet service = \"Seamless\"\n\nswitch service {\ncase \"Uber\", \"Lyft\":\n    print(\"travel\")\n  case \"DoorDash\", \"Seamless\", \"GrubHub\":\n    print(\"Restaurant delivery\")\n  case \"Instacart\", \"FreshDirect\":\n    print(\"Grocery Delivery\")\n  default:\n    print(\"Unknown service\")\n}\n// print: restaurant takeaway\n```\n\n### switch statement: where clause\n\n```swift\nlet num = 7\n\nswitch num {\n  case let x where x % 2 == 0:\n    print(\"\\(num) is even\")\n  case let x where x % 2 == 1:\n    print(\"\\(num) odd number\")\n  default:\n    print(\"\\(num) is invalid\")\n}\n\n// print: 7 odd\n```\n\n### Logical Operators\n\n```swift\n!true  // false\n!false //true\n```\n### Logical Operators &&\n\n```swift\ntrue && true   // true\ntrue && false  // false\nfalse && true  // false\nfalse && false // false\n```\n\n### Logical operators ||\n\n```swift\ntrue || true   // true\ntrue || false  // true\nfalse || true  // true\nfalse || false // false\n```\n\n### Combined Logical Operators\n\n```swift\n!false && true || false // true\n```\n\n`!false && true` first evaluates and returns `true` Then, the expression, `true` || `false` evaluates and returns the final result `true`\n\n```swift\nfalse || true && false // false\n```\n`true && false` first evaluates to return `false` Then, the expression, `false` || `false` evaluates and returns the final result `false`\n\n\n### Control the order of execution\n\n```swift\n\n// without parentheses:\ntrue || true && false || false\n//----> true\n\n// with brackets:\n(true || true) && (false || false)\n//----> false\n\n```\n\n### Simple guards\n\n```swift\nfunc greet(name: String?) {\n  guard let unwrapped = name else {\n    print(\"Hello guest!\")\n    return\n  }\n  print(\"Hello \\(unwrapped)!\")\n}\ngreet(name: \"Asma\") // output: Hello Asma!\ngreet(name: nil)    // output: Hello guest!\n```"
                },
                {
                    "title": "cycle",
                    "content": "### scope\n\n```swift\nlet zeroToThree = 0...3\n//zeroToThree: 0, 1, 2, 3\n```\n\n### stride() function\n\n```swift\nfor oddNum in stride(from: 1, to: 5, by: 2) {\n  print(oddNum)\n}\n// print: 1\n// print: 3\n```\n\n### for-in loop\n\n```swift\nfor char in \"hehe\" {\n  print(char)\n}\n// print: h\n// print: e\n// print: h\n// print: e\n```\n\n### continue keyword\n\nThe `continue` keyword will force the loop to continue for the next iteration.\n\n```swift\nfor num in 0...5 {\n  if num % 2 == 0 {\n    continue\n  }\n  print(num)\n}\n// print: 1\n// print: 3\n// print: 5\n```\n\n### break keyword\n\n```swift\nfor char in \"supercalifragilistic\" {\nif char == \"c\" {\n    break\n  }\n  print(char)\n}\n// print: s\n// print: u\n// print: p\n// print: e\n// print: r\n```\n\n### Use underscores\n\n```swift\nfor _ in 1...3 {\n  print(\"Ole\")\n}\n// print: Ole\n// print: Ole\n// print: Ole\n```\n\n### while loop\n\n```swift\nvar counter = 1\nvar stopNum = Int.random(in: 1...10)\n\nwhile counter < stopNum {\n  print(counter)\n  counter += 1\n}\n// loop to print until the stop condition is met\n```\n\nA `while` loop accepts a condition and keeps executing its body code while the provided condition is `true`. If the condition is never false, the loop will keep running and the program will get stuck in an `infinite loop`"
                },
                {
                    "title": "Arrays and collections",
                    "content": "### Array array\n\n```swift\nvar scores = [Int]()\n// array is empty: []\n```\n\n### .count property\n\n```swift\nvar grocery = [\"\ud83e\udd53\", \"\ud83e\udd5e\", \"\ud83c\udf6a\", \"\ud83e\udd5b\", \"\ud83c\udf4a\"]\nprint(grocery.count)\n// print: 5\n```\n\n### index\n\nThe index refers to the item's position in the ordered list, and a single element is retrieved from the array using the subscript syntax `array[index]`.\n\n```swift\nvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nprint(vowels[0]) // prints: a\nprint(vowels[1]) // prints: e\nprint(vowels[2]) // print: i\nprint(vowels[3]) // prints: o\nprint(vowels[4]) // prints: u\n```\n\nNote: Swift arrays are zero-indexed, meaning the first element has index 0.\n\n### Initialize with array literal\n\n```swift\n// use type inference:\nvar snowfall = [2.4, 3.6, 3.4, 1.8, 0.0]\n// explicit type:\nvar temp: [Int] = [33, 31, 30, 38, 44]\n```\n\n### .append() method and += operator\n\n```swift\nvar gymBadges = [\"Boulder\", \"Cascade\"]\ngymBadges.append(\"Thunder\")\ngymBadges += [\"Rainbow\", \"Soul\"]\n// [\"Boulder\", \"Cascade\", \"Thunder\",\n// \"Rainbow\", \"Soul\"]\n```\n\n### .insert() and .remove() methods\n\n```swift\nvar moon = [\"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\nmoon.insert(\"\ud83c\udf15\", at: 0)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\n\nmoon.remove(at: 4)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\"]\n```\n\n### Traverse the array\n\n```swift\nvar employees = [\"Peter\", \"Denial\", \"Jame\"]\nfor person in employees {\n  print(person)\n}\n// print: Peter\n// print: Denial\n// print: Jam\n```\n\n### Collection (Set)\n\n```swift\nvar paintingsInMOMA: Set = [\n  \"The Dream\",\n  \"The Starry Night\",\n  \"The False Mirror\"\n]\n```\n\nWe can use a collection (`Set`) to store `unique` elements of the same data type.\n\n\n### Empty collection (Set)\n\n```swift\nvar team = Set<String>()\n\nprint(team)\n// print: [] \n```\n\n### Populate the collection\n\n```swift\nvar vowels: Set = [\"a\", \"e\", \"i\", \"o\",\"u\"]\n```\n\nTo create a set filled with values, use the `Set` keyword before the assignment operator.\n\n### .insert()\n\n```swift\nvar cookieJar: Set = [\n  \"Chocolate Chip\",\n  \"Oatmeal Raisin\"\n]\n// add a new element\ncookieJar.insert(\"Peanut Butter Chip\")\n```\n\n### .remove() and .removeAll() methods\n\n```swift\nvar oddNumbers: Set = [1, 2, 3, 5]\n\n// remove existing element\noddNumbers.remove(2)\n// remove all elements\noddNumbers.removeAll()\n```\n\n### .contains()\n\n```swift\nvar names: Set = [\"Rosa\", \"Doug\", \"Waldo\"]\nprint(names.contains(\"Lola\")) // print: false\n\nif names.contains(\"Waldo\"){\n  print(\"There's Waldo!\")\n} else {\n  print(\"Where's Waldo?\")\n}\n// print: There's Waldo!\n```\n\n### Iterate over a collection\n\n```swift\nvar recipe: Set = [\"Egg\", \"Flour\", \"Sugar\"]\n\nfor ingredient in recipe {\n  print (\"Include \\(ingredient) in the recipe\")\n}\n```\n\n### .isEmpty property\n\n```swift\nvar emptySet = Set<String>()\nprint(emptySet.isEmpty)     // print: true\n\nvar populatedSet: Set = [1, 2, 3]\nprint(populatedSet.isEmpty) // print: false\n```\n\n### .count property\n\n```swift\nvar band: Set = [\"Peter\", \"Denial\", \"Jame\"]\n\nprint(\"The band has \\(band.count) players.\")\n// print: Band has 4 players.\n```\n\n### .intersection() Intersection\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.intersection(setB)\nprint(setC) // print: [\"D\", \"C\"]\n```\n\n### .union()\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.union(setB)\nprint(setC) \n// print: [\"B\", \"A\", \"D\", \"F\", \"C\", \"E\"]\n```\n### .symmetricDifference() Symmetric difference\n\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.symmetricDifference(setB)\nprint(setC)\n// print: [\"B\", \"E\", \"F\", \"A\"]\n```\n\n### .subtracting() Subtraction\n```swift\nvar setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\"]\n\nvar setC = setA.subtracting(setB)\nprint(setC) \n// print: [\"B\", \"A\"]\n```"
                },
                {
                    "title": "dictionary",
                    "content": "### Base Dictionary\n\n```swift\nvar dictionaryName = [\n  \"Key1\": \"Value1\",\n  \"Key2\": \"Value2\",\n  \"Key3\": \"Value3\"\n]\n```\n\nAn `unordered` collection of pairs of data or key-value pairs\n\n\n\n### Keys\n\n```swift\nvar fruitStand = [\n  \"Coconuts\": 12,\n  \"Pineapples\": 12,\n  \"Papaya\": 12\n]\n```\n\nEach `key` is `unique` even if they all contain the same `value`\n\n\n\n### Type Consistency\n\n```swift\nvar numberOfSides = [\n  \"triangle\": 3,\n  \"square\": 4,\n  \"rectangle\": 4\n]\n```\n\nContains only `String` keys and `Int` values\n\n\n\n### Initialize and populate the dictionary\n\n```swift\nvar employeeID = [\n  \"Hamlet\": 1367,\n  \"Horatio\": 8261,\n  \"Ophelia\": 9318\n]\n```\n\n\n### Initialize an empty dictionary\n\n```swift\n// initializer syntax:\nvar yearlyFishPopulation = [Int: Int]()\n\n// Empty dictionary literal syntax:\nvar yearlyBirdPopulation: [Int: Int] = [:]\n```\n\n\n### add to dictionary\n\n```swift\nvar pronunciation = [\n  \"library\": \"lai\u00b7breh\u00b7ree\",\n  \"apple\": \"a\u00b7pl\"\n]\n// new key: \"programming\", new value: \"prow gra\"\npronunciation[\"programming\"] = \"prow\u00b7gra\"\n```\n\n### Delete key-value pair \n\n```swift\nvar bookShelf = [\n  \"Goodnight\": \"Margaret Wise Brown\",\n  \"The BFG\": \"Roald Dahl\",\n  \"Falling Up\": \"Shel Silverstein\",\n  \"No, David!\": \"David Shannon\"\n]\n// remove value by setting key to nil\nbookShelf[\"The BFG\"] = nil\n\n// remove value using .removeValue()\nbookShelf.removeValue(forKey: \"Goodnight\")\n\n// remove all values\nbookShelf.removeAll()\n```\n\n### Modify the key-value pair \n\n```swift\nvar change = [\n  \"Quarter\": 0.29,\n  \"Dime\": 0.15,\n  \"Nickel\": 0.05\n]\n\n// Change the value using subscript syntax\nchange[\"Quarter\"] = .25\n\n// Change the value using .updateValue()\nchange.updateValue(.10, forKey: \"Dime\")\n```\n\nTo change the value of a key-value pair, use the `.updateValue()` method or the subscript syntax by appending brackets `[ ]` with the existing keys within to the name of the dictionary, then adding the assignment operator _(`= `)_ followed by the modified value\n\n\n### .isEmpty property\n\n```swift\nvar bakery = [String:Int]()\n\n// check if the dictionary is empty\nprint(bakery.isEmpty) // prints true\nbakery[\"Cupcakes\"] = 12\n// check if the dictionary is empty\nprint(bakery.isEmpty) // print false\n```\n### .count property\n\n```swift\nvar fruitStand = [\n  \"Apples\": 12,\n  \"Oranges\", 17\n]\nprint(fruitStand.count) // print: 2\n```\n\n### Assigning values to variables\n\n```swift\nvar hex = [\n  \"red\": \"#ff0000\",\n  \"yellow\": \"#ffff00\",\n  \"blue\": \"#0000ff\",\n]\n\nprint(\"Blue hexadecimal code \\(hex[\"blue\"])\")\n// print: blue hex code Optional(\"#0000ff\")\n\nif let redHex = hex[\"red\"] {\n  print(\"red hexadecimal code \\(redHex)\")\n}\n// print: red hex code #ff0000\n```\n\nAssigning the value of a key-value pair to a variable will return an optional value. To extract values, use the optional expansion\n\n\n### Traversing the dictionary\n\n```swift\nvar emojiMeaning = [\n  \"\ud83e\udd14\": \"Thinking Face\",\n  \"\ud83d\ude2a\": \"Sleepy Face\",\n  \"\ud83d\ude35\": \"Dizzy Face\"\n]\n// loop through keys and values\nfor (emoji, meaning) in emojiMeaning {\n  print(\"\\(emoji) is called '\\(meaning)Emoji'\")\n}\n// iterate through keys only\nfor emoji in emojiMeaning.keys {\n  print(emoji)\n}\n// iterate through values only\nfor meaning in emojiMeaning.values {\n  print(meaning)\n}\n```"
                },
                {
                    "title": "Functions",
                    "content": "### Basic functions\n\n```swift\nfunc washCar() -> Void {\n  print(\"Soap\")\n  print(\"Scrub\")\n  print(\"Rinse\")\n  print(\"Dry\")\n}\n```\n\n### Call functions\n\n```swift\nfunc greetLearner() {\n print(\"Welcome to CheatSheets.zip!\")\n}\n// function call:\ngreetLearner()\n// print: Welcome to CheatSheets.zip!\n```\n\n\n### return value\n\n```swift\nlet birthYear = 1994\nvar currentYear = 2020\n\nfunc findAge() -> Int {\n  return currentYear-birthYear\n}\n\nprint(findAge()) // prints: 26\n```\n\n### Multiple parameters \n\n```swift\nfunc convertFracToDec(numerator: Double, denominator: Double) -> Double {\n  return numerator / denominator\n}\n\nlet decimal = convertFracToDec(numerator: 1.0, denominator: 2.0)\nprint(decimal) // prints: 0.5\n```\n\n\n### Omit parameter labels\n\n```swift\nfunc findDiff(_ a: Int, b: Int) -> Int {\n  return a -b\n}\n\nprint(findDiff(6, b: 4)) // prints: 2\n```\n\n\n### return multiple values \n\n```swift\nfunc smartphoneModel() -> (name: String, version: String, yearReleased: Int) {\n  return (\"iPhone\", \"8 Plus\", 2017)\n}\nlet phone = smartphoneModel()\n\nprint(phone.name)         // print: iPhone\nprint(phone.version)      // print: 8 Plus\nprint(phone.yearReleased) // print: 2017\n```\n\n\n### Parameters & Arguments\n\n```swift\nfunc findSquarePerimet(side: Int) -> Int {\n  return side *4\n}\n\nlet perimeter = findSquarePerimet(side: 5)\nprint(perimeter) // print: 20\n\n// Parameter: side\n// Argument: 5\n```\n\n### Implicit return\n```swift\nfunc nextTotalSolarEclipse() -> String {\n  \"April 8th, 2024 \ud83c\udf0e\"\n}\n\nprint(nextTotalSolarEclipse())\n// print: April 8th, 2024 \ud83c\udf0e\n```\n\n### Default parameters\n\n```swift\nfunc greet(person: String = \"guest\") {\n  print(\"Hello \\(person)\")\n}\ngreet() // Hello guest\ngreet(person: \"Aliya\") // Hello Aliya\n```\n\n\n### Input and output parameters \n\n```swift\nvar currentSeason = \"Winter\"\n\nfunc season(month: Int, name: inout String) {\n  switch month {\n    case 1...2:\n      name = \"Winter \u26c4\ufe0f\"\n    case 3...6:\n      name = \"Spring \ud83c\udf31\"\n    case 7...9:\n      name = \"Summer \u26f1\"\n    case 10...11:\n      name = \"Autumn \ud83c\udf42\"\n    default:\n      name = \"Unknown\"\n  }\n}\nseason(month: 4, name: &currentSeason)\n\nprint(currentSeason) // Spring \ud83c\udf31\n```\n\n\n### variable parameter\n\n```swift\nfunc totalStudent(data: String...) -> Int {\n  let numStudents = data.count\n  return numStudents\n}\n\nprint(totalStudent(data: \"Denial\", \"Peter\"))\n// print: 2\n```\n\n### Optional parameters\n\n```swift\nfunc getFirstInitial(from name: String?) -> String? {\n  return name?.first\n}\n```\n\nFunctions can accept optional types and return optional types. When a function cannot return a reasonable instance of the requested type, it should return `nil`"
                },
                {
                    "title": "Structures",
                    "content": "### Structure Creation\n\n```swift\nstruct Building {\n  var address: String\n  var floors: Int\n  init(address: String, floors: Int) {\n    self.address = address\n    self.floors = floors\n  }\n}\n```\n\nStructs or structs are used to programmatically represent real-life objects in code. A structure is created using the `struct` keyword, followed by its name, followed by a body containing its properties and methods\n\n\n### Default property values\n\n```swift\nstruct Car {\n  var numOfWheels = 4\n  var topSpeed = 80\n}\n\nvar reliantRobin = Car(numOfWheels: 3)\n\nprint(reliantRobin.numOfWheels) // prints: 3\nprint(reliantRobin.topSpeed)    // print: 80\n```\n\n\n### Structural instance creation\n\n```swift\nstruct Person {\n  var name: String\n  var age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\n// Person instance:\nvar morty = Person(name: \"Peter\", age: 14)\n```\n\n### init() method \n\n```swift\nstruct TV {\n  var size: Int\n  var type: String\n  \n  init(size: Int, type: String) {\n    self.size = size\n    self.type = type\n  }\n}\n```\n\nUsing the `TV` class\n\n```swift\nvar newTV = TV(size: 65, type: \"LED\")\n```\n\n\n### Check type\n\n```swift\nprint(type(of: \"abc\")) // print: String\nprint(type(of: 123))   // print: 123\n```\n\n\n### Mutation method (mutating) \n\n```swift\nstruct Menu {\n  var menuItems = [\"Fries\", \"Burgers\"]\n  mutating func addToMenu(dish: String) {\n    self.menuItems.append(dish)\n  }\n}\n```\n\nUsing the `Menu` class\n\n```swift\nvar dinerMenu = Menu()\ndinerMenu.addToMenu(dish: \"Toast\")\nprint(dinerMenu.menuItems)\n// prints: [\"Fries\", \"Burgers\", \"Toast\"]\n```\n\n### Structural methods\n\n```swift\nstruct Dog {\n  func bark() {\n    print(\"Woof\")\n  }\n}\nlet fido = Dog()\nfido.bark() // prints: Woof\n```"
                },
                {
                    "title": "Classes",
                    "content": "### reference type (class) \n\n```swift\nclass Player {\n  var name: String\n\n  init(name: String) {\n    self.name = name\n  }\n}\n\nvar player1 = Player(name: \"Tomoko\")\nvar player2 = player1\nplayer2.name = \"Isabella\"\n\nprint(player1.name) // Isabella\nprint(player2.name) // Isabella\n```\n\n\n### instance of the class\n\n```swift\nclass Person {\n  var name = \"\"\n  var age = 0\n}\n\nvar sonny = Person()\n// sonny is now an instance of Person\n```\n\n### init() method \n\n```swift\nclass Fruit {\n  var hasSeeds = true\n  var color: String\n\n  init(color: String) {\n    self.color = color\n  }\n}\n```\n\nUsing the Fruit class\n\n```swift\nlet apple = Fruit(color: \"red\")\n```\nA class can be initialized using the `init()` method and the corresponding initialization properties. In the `init()` method, the `self` keyword is used to refer to the actual instance of the class assigning property values\n\n\n### Class Attributes\n\n```swift\nvar ferris = Student()\n\nferris.name = \"Ferris Bueller\"\nferris.year = 12\nferris.gpa = 3.81\nferris.honors = false\n```\n\n\n### Inherit \n\nSuppose we have a BankAccount class:\n\n```swift\nclass BankAccount {\n  var balance = 0.0\n  func deposit(amount: Double) {\n    balance += amount\n  }\n  func withdraw(amount: Double) {\n    balance -= amount\n  }\n}\n```\n\n`SavingsAccount` extends `BankAccount` class\n\n```swift\nclass SavingsAccount: BankAccount {\n  var interest = 0.0\n\n  func addInterest() {\n    let interest = balance *0.005\n    self.deposit(amount: interest)\n  }\n}\n```\n\nThe new `SavingsAccount` class (subclass) automatically gets all the characteristics of the `BankAccount` class (superclass). Additionally, the `SavingsAccount` class defines an `.interest` property and an `.addInterest()` method.\n\n\n### Example\n\nuse data type\n\n```swift\nclass Student {\n  var name: String\n  var year: Int\n  var gpa: Double\n  var honors: Bool\n}\n```\n\nUse default property values\n\n```swift\nclass Student {\n  var name = \"\"\n  var gpa = 0.0\n  var honors = false\n}\n```\n\n### This is an example of a struct definition and a class definition\n\n```swift\nstruct Resolution {\n  var width = 0\n  var height = 0\n}\nclass VideoMode {\n  var resolution = Resolution()\n  var interlaced = false\n  var frameRate = 0.0\n  var name: String?\n}\n```\n\nThe `Resolution` structure definition and the `VideoMode` class definition only describe the appearance of `Resolution` or `VideoMode`, create an instance of the structure or class:\n\n```swift\nlet resolution = Resolution(width: 1920)\nlet someVideoMode = VideoMode()\n```"
                },
                {
                    "title": "Enumerate",
                    "content": "### Define the enumeration\n\n```swift\nenum Day {\n  case monday\n  case tuesday\n  case wednesday\n  case thursday\n  case friday\n  case saturday\n  case sunday\n}\n\nlet casualWorkday: Day = .friday\n```\n\n### Switch statement\n\n```swift\nenum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet customerOrder: Dessert = .cake(flavor: \"Red Velvet\")\nswitch customerOrder {\n  case let .cake(flavor):\n    print(\"You ordered a \\(flavor) cake\")\n  case .brownie:\n    print(\"You ordered a chocolate cake\")\n}\n// prints: \"You ordered a red velvet cake\"\n```\n\n### CaseIterable\n\n```swift\nenum Season: CaseIterable {\n  case winter\n  case spring\n  case summer\n  case falls\n}\n\nfor season in Season.allCases {\n  print(season)\n}\n```\n\nAdd conformance to the `CaseIterable` protocol to access the `allCases` property, which returns an array of all cases of the enumeration\n\n\n### Original value\n\n```swift\nenum Beatle: String {\n  case john paul george ringo\n}\n\nprint(\"The Beatles are \\(Beatle.john.rawValue).\")\n// print: The Beatles are john.\n```\n\n\n### Related values\n\n```swift\nenum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet order: Dessert = .cake(flavor: \"Red Velvet\")\n```\n\n### instance method \n\n```swift\nenum Traffic {\n  case light\n  case heavy\n\n  mutating func reportAccident() {\n    self = .heavy\n  }\n}\n\nvar currentTraffic: Traffic = .light\n\ncurrentTraffic.reportAccident()\n// currentTraffic is now .heavy\n```\n\nJust like classes and structs, enumerations can have instance methods. If an instance method mutates the value of the enum, it needs to be marked `mutating`\n\n\n### Initialize from primitive value\n\n```swift\nenum Hello: String {\n  case english = \"Hello\"\n  case japanese = \"Hello!\"\n  case emoji = \"\ud83d\udc4b\"\n}\nlet hello1 = Hello(rawValue: \"Hello!\")\nlet hello2 = Hello(rawValue: \"\u041f\u0440\u0438\u0432\u0435\u0442\")\nprint(hello1) // Optional(Hello.japanese)\nprint(hello2) // nil\n```\n\n\n### Computed properties\n\n```swift\nenum ShirtSize: String {\n  case small = \"S\"\n  case medium = \"M\"\n  case large = \"L\"\n  case extraLarge = \"XL\"\n  var description: String {\n    return \"The size of this shirt is \\(self.rawValue)\"\n  }\n}\n```"
                }
            ]
        },
        {
            "title": "Go",
            "tags": [
                "Go"
            ],
            "categories": [
                "Programming"
            ],
            "background": "#4ba4cc",
            "icon": "https://www.svgrepo.com/show/452214/go.svg",
            "intro": "This cheat sheet provided basic syntax and methods to help you using [Go](https://go.dev/). \n",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "- [Devhints](https://devhints.io/go) _(devhints.io)_\n- [A tour of Go](https://tour.go.dev/welcome/1) _(tour.go.dev)_\n- [Go wiki](https://github.com/golang/go/wiki/) _(github.com)_\n- [Effective Go](https://go.dev/doc/effective_go) _(go.dev)_\n- [Go by Example](https://gobyexample.com/) _(gobyexample.com)_\n- [Awesome Go](https://awesome-go.com/) _(awesome-go.com)_\n- [JustForFunc Youtube](https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw) _(youtube.com)_\n- [Style Guide](https://github.com/golang/go/wiki/CodeReviewComments) _(github.com)_\n\n\n### hello.go\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world!\")\n}\n```\nRun directly\n```shell script\n$ go run hello.go\nHello, world!\n```\nOr try it out in the [Go repl](https://repl.it/languages/go)\n\n\n\n### Variables\n```go\nvar s1 string\ns1 = \"Learn Go!\"\n\n// declare multiple variables at once\nvar b, c int = 1, 2\nvar d = true\n```\nShort declaration\n```go\ns1 := \"Learn Go!\"        // string\nb, c := 1, 2             // int\nd := true                // bool\n```\n\n\n\n\n### Functions\n```go\npackage main\n\nimport \"fmt\"\n\n// The entry point of the programs\nfunc main() {\n    fmt.Println(\"Hello world!\")\n    say(\"Hello Go!\")\n}\n\nfunc say(message string) {\n    fmt.Println(\"You said: \", message)\n}\n```\n\n\n\n### Comments\n```go\n// Single line comment\n\n/* Multi-\n line comment */\n```\n\n\n\n### If statement\n```go\nif true {\n    fmt.Println(\"Yes!\")\n}\n```"
                },
                {
                    "title": "Basic types",
                    "content": "### Strings\n\n```go\ns1 := \"Hello\" + \"World\"\n\ns2 := `A \"raw\" string literal\ncan include line breaks.`\n\n// Outputs: 10\nfmt.Println(len(s1))\n\n// Outputs: Hello\nfmt.Println(string(s1[0:5]))\n```\nStrings are of type `string`.\n\n\n### Numbers \n\n```go\nnum := 3         // int\nnum := 3.        // float64\nnum := 3 + 4i    // complex128\nnum := byte('a') // byte (alias: uint8)\n\nvar u uint = 7        // uint (unsigned)\nvar p float32 = 22.7  // 32-bit float\n```\n#### Operators\n```go\nx := 5\nx++\nfmt.Println(\"x + 4 =\", x + 4)\nfmt.Println(\"x * 4 =\", x * 4) \n```\n\n\n\n\n### Booleans\n\n```go\nisTrue   := true\nisFalse  := false\n```\n\n#### Operators \n```go\nfmt.Println(true && true)   // true \nfmt.Println(true && false)  // false\nfmt.Println(true || true)   // true\nfmt.Println(true || false)  // true\nfmt.Println(!true)          // false\n```\n\n\n\n\n### Arrays \n```go\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 2  | 3  | 5  | 7  | 11  | 13  |\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n  0    1    2    3     4     5\n```\n\n---\n\n```go\nprimes := [...]int{2, 3, 5, 7, 11, 13}\nfmt.Println(len(primes)) // => 6\n\n// Outputs: [2 3 5 7 11 13]\nfmt.Println(primes)\n\n// Same as [:3], Outputs: [2 3 5]\nfmt.Println(primes[0:3])\n```\n---\n```go\nvar a [2]string\na[0] = \"Hello\"\na[1] = \"World\"\n\nfmt.Println(a[0], a[1]) //=> Hello World\nfmt.Println(a)   // => [Hello World]\n```\n#### 2d array\n```go\nvar twoDimension [2][3]int\nfor i := 0; i < 2; i++ {\n    for j := 0; j < 3; j++ {\n        twoDimension[i][j] = i + j\n    }\n}\n// => 2d:  [[0 1 2] [1 2 3]]\nfmt.Println(\"2d: \", twoDimension)\n```\n\n\n\n### Pointers\n\n```go\nfunc main () {\n  b := *getPointer()\n  fmt.Println(\"Value is\", b)\n}\n```\n\n\n```go\nfunc getPointer () (myPointer *int) {\n  a := 234\n  return &a\n}\n```\n\n\n```go\na := new(int)\n*a = 234\n```\n\nSee: [Pointers](https://tour.go.dev/moretypes/1)\n\n\n### Slices\n\n```go\ns := make([]string, 3)\ns[0] = \"a\"\ns[1] = \"b\"\ns = append(s, \"d\")\ns = append(s, \"e\", \"f\")\n\nfmt.Println(s)\nfmt.Println(s[1])\nfmt.Println(len(s))\nfmt.Println(s[1:3])\n\nslice := []int{2, 3, 4}\n```\n\nSee also: [Slices example](https://gobyexample.com/slices)\n\n\n\n\n\n\n### Constants\n```go\nconst s string = \"constant\"\nconst Phi = 1.618\nconst n = 500000000\nconst d = 3e20 / n\nfmt.Println(d)\n```\n\n\n\n\n### Type conversions\n\n```go\ni := 90\nf := float64(i)\nu := uint(i)\n\n// Will be equal to the character Z\ns := string(i)\n```\n\n#### How to get int string?\n\n```go\ni := 90\n\n// need import \"strconv\"\ns := strconv.Itoa(i)\nfmt.Println(s) // Outputs: 90\n```"
                },
                {
                    "title": "Strings",
                    "content": "### Strings function\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\ts \"strings\"\n)\n\nfunc main() {\n    /* Need to import strings as s */\n\tfmt.Println(s.Contains(\"test\", \"e\"))\n\n    /* Build in */\n    fmt.Println(len(\"hello\"))  // => 5\n    // Outputs: 101\n\tfmt.Println(\"hello\"[1])\n    // Outputs: e\n\tfmt.Println(string(\"hello\"[1]))\n\n}\n```\n\n\n\n### fmt.Printf \n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\ntype point struct {\n\tx, y int\n}\n\nfunc main() {\n\tp := point{1, 2}\n\tfmt.Printf(\"%v\\n\", p)                        // => {1 2}\n\tfmt.Printf(\"%+v\\n\", p)                       // => {x:1 y:2}\n\tfmt.Printf(\"%#v\\n\", p)                       // => main.point{x:1, y:2}\n\tfmt.Printf(\"%T\\n\", p)                        // => main.point\n\tfmt.Printf(\"%t\\n\", true)                     // => TRUE\n\tfmt.Printf(\"%d\\n\", 123)                      // => 123\n\tfmt.Printf(\"%b\\n\", 14)                       // => 1110\n\tfmt.Printf(\"%c\\n\", 33)                       // => !\n\tfmt.Printf(\"%x\\n\", 456)                      // => 1c8\n\tfmt.Printf(\"%f\\n\", 78.9)                     // => 78.9\n\tfmt.Printf(\"%e\\n\", 123400000.0)              // => 1.23E+08\n\tfmt.Printf(\"%E\\n\", 123400000.0)              // => 1.23E+08\n\tfmt.Printf(\"%s\\n\", \"\\\"string\\\"\")             // => \"string\"\n\tfmt.Printf(\"%q\\n\", \"\\\"string\\\"\")             // => \"\\\"string\\\"\"\n\tfmt.Printf(\"%x\\n\", \"hex this\")               // => 6.86578E+15\n\tfmt.Printf(\"%p\\n\", &p)                       // => 0xc00002c040\n\tfmt.Printf(\"|%6d|%6d|\\n\", 12, 345)           // => |    12|   345|\n\tfmt.Printf(\"|%6.2f|%6.2f|\\n\", 1.2, 3.45)     // => |  1.20|  3.45|\n\tfmt.Printf(\"|%-6.2f|%-6.2f|\\n\", 1.2, 3.45)   // => |1.20  |3.45  |\n\tfmt.Printf(\"|%6s|%6s|\\n\", \"foo\", \"b\")        // => |   foo|     b|\n\tfmt.Printf(\"|%-6s|%-6s|\\n\", \"foo\", \"b\")      // => |foo   |b     |\n\n\ts := fmt.Sprintf(\"a %s\", \"string\")\n\tfmt.Println(s)\n\n\tfmt.Fprintf(os.Stderr, \"an %s\\n\", \"error\")\n}\n\n```\nSee also: [fmt](https://go.dev/pkg/fmt/)\n\n\n\n\n### Function examples\n| Example                       | Result      |\n|-------------------------------|-------------|\n| Contains(\"test\", \"es\")        | true        |\n| Count(\"test\", \"t\")            | 2           |\n| HasPrefix(\"test\", \"te\")       | true        |\n| HasSuffix(\"test\", \"st\")       | true        |\n| Index(\"test\", \"e\")            | 1           |\n| Join([]string{\"a\", \"b\"}, \"-\") | a-b         |\n| Repeat(\"a\", 5)                | aaaaa       |\n| Replace(\"foo\", \"o\", \"0\", -1)  | f00         |\n| Replace(\"foo\", \"o\", \"0\", 1)   | f0o         |\n| Split(\"a-b-c-d-e\", \"-\")       | [a b c d e] |\n| ToLower(\"TEST\")               | test        |\n| ToUpper(\"test\")               | TEST        |"
                },
                {
                    "title": "Flow control",
                    "content": "### Conditional\n\n```go\n\na := 10\n\nif a > 20 {\n    fmt.Println(\">\")\n} else if a < 20 {\n    fmt.Println(\"<\")\n} else {\n    fmt.Println(\"=\")\n}\n```\n\n### Statements in if\n\n```go\nx := \"hello go!\"\n\nif count := len(x); count > 0 {\n    fmt.Println(\"Yes\")\n}\n\n```\n---\n```go\n\nif _, err := doThing(); err != nil {\n    fmt.Println(\"Uh oh\")\n}\n```\n\n### Switch\n```go \nx := 42.0\nswitch x {\ncase 0:\ncase 1, 2:\n    fmt.Println(\"Multiple matches\")\ncase 42:   // Don't \"fall through\".\n    fmt.Println(\"reached\")\ncase 43:\n    fmt.Println(\"Unreached\")\ndefault:\n    fmt.Println(\"Optional\")\n}\n```\n\nSee: [Switch](https://github.com/golang/go/wiki/Switch)\n\n### For loop\n\n```go\nfor i := 0; i <= 10; i++ {\n  fmt.Println(\"i: \", i)\n}\n```\n\n### For-Range loop\n\n```go \nnums := []int{2, 3, 4}\nsum := 0\nfor _, num := range nums {\n    sum += num\n}\nfmt.Println(\"sum:\", sum)\n```\n\n### While loop\n\n```go\ni := 1\nfor i <= 3 {\n    fmt.Println(i)\n    i++\n}\n```\n\n### Continue keyword\n```go\nfor i := 0; i <= 5; i++ {\n    if i % 2 == 0 {\n        continue\n    }\n    fmt.Println(i)\n}\n```\n### Break keyword\n```go\nfor {\n    fmt.Println(\"loop\")\n    break\n}\n```"
                },
                {
                    "title": "Structs & Maps",
                    "content": "### Defining \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Vertex struct {\n\tX int\n\tY int\n}\n\nfunc main() {\n\tv := Vertex{1, 2}\n\tv.X = 4\n\tfmt.Println(v.X, v.Y) // => 4 2\n}\n```\n\nSee: [Structs](https://tour.go.dev/moretypes/2)\n\n### Literals\n\n```go\nv := Vertex{X: 1, Y: 2}\n// Field names can be omitted\nv := Vertex{1, 2}\n// Y is implicit\nv := Vertex{X: 1}\n```\n\nYou can also put field names.\n\n\n### Maps\n```go\nm := make(map[string]int)\nm[\"k1\"] = 7\nm[\"k2\"] = 13\nfmt.Println(m) // => map[k1:7 k2:13]\n\nv1 := m[\"k1\"]\nfmt.Println(v1)     // => 7\nfmt.Println(len(m)) // => 2\n\ndelete(m, \"k2\")\nfmt.Println(m) // => map[k1:7]\n\n_, prs := m[\"k2\"]\nfmt.Println(prs) // => false\n\nn := map[string]int{\"foo\": 1, \"bar\": 2}\nfmt.Println(n) // => map[bar:2 foo:1]\n```\n\n\n### Pointers to structs\n\n```go\nv := &Vertex{1, 2}\nv.X = 2\n```\n\nDoing `v.X` is the same as doing `(*v).X`, when `v` is a pointer."
                },
                {
                    "title": "Functions",
                    "content": "### Multiple arguments\n```go\nfunc plus(a int, b int) int {\n    return a + b\n}\nfunc plusPlus(a, b, c int) int {\n    return a + b + c\n}\nfmt.Println(plus(1, 2))\nfmt.Println(plusPlus(1, 2, 3))\n```\n\n### Multiple return\n\n```go\nfunc vals() (int, int) {\n    return 3, 7\n}\n\na, b := vals()\nfmt.Println(a)    // => 3\nfmt.Println(b)    // => 7\n```\n\n### Function literals\n\n```go\nr1, r2 := func() (string, string) {\n    x := []string{\"hello\", \"cheatsheets.zip\"}\n    return x[0], x[1]\n}()\n\n// => hello cheatsheets.zip\nfmt.Println(r1, r2)\n```\n\n### Naked returns\n\n```go\nfunc split(sum int) (x, y int) {\n  x = sum * 4 / 9\n  y = sum - x\n  return\n}\n\nx, y := split(17)\nfmt.Println(x)   // => 7\nfmt.Println(y)   // => 10\n```\n\nNote that using naked returns hurts readability.\n\n### Variadic functions\n```go\nfunc sum(nums ...int) {\n    fmt.Print(nums, \" \")\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}\nsum(1, 2)     //=> [1 2] 3\nsum(1, 2, 3)  // => [1 2 3] 6\n\nnums := []int{1, 2, 3, 4}\nsum(nums...)  // => [1 2 3 4] 10\n```\n\n\n### init function\n```go\nimport --> const --> var --> init()\n```\n---\n```go\nvar num = setNumber()\n\nfunc setNumber() int {\n    return 42\n}\nfunc init() {\n    num = 0\n}\nfunc main() {\n    fmt.Println(num) // => 0\n}\n```\n\n\n### Functions as values\n```go\nfunc main() {\n    // assign a function to a name\n    add := func(a, b int) int {\n        return a + b\n    }\n    // use the name to call the function\n    fmt.Println(add(3, 4)) // => 7\n}\n```\n\n### Closures 1\n```go\nfunc scope() func() int{\n    outer_var := 2\n    foo := func() int {return outer_var}\n    return foo\n}\n\n// Outpus: 2\nfmt.Println(scope()())\n```\n\n### Closures 2\n```go\nfunc outer() (func() int, int) {\n    outer_var := 2\n    inner := func() int {\n        outer_var += 99\n        return outer_var\n    }\n    inner()\n    return inner, outer_var\n}\ninner, val := outer()\nfmt.Println(inner()) // => 200\nfmt.Println(val)     // => 101\n```"
                },
                {
                    "title": "Go Packages",
                    "content": "### Importing\n\n```go\nimport \"fmt\"\nimport \"math/rand\"\n```\n#### Same as\n```go\nimport (\n  \"fmt\"        // gives fmt.Println\n  \"math/rand\"  // gives rand.Intn\n)\n```\n\nSee: [Importing](https://tour.go.dev/basics/1)\n\n\n\n\n### Aliases \n\n```go\nimport r \"math/rand\"\n```\n---\n```go\nimport (\n    \"fmt\"\n    r \"math/rand\"\n)\n```\n---\n```go\nr.Intn()\n```\n\n\n### Packages\n\n```go\npackage main\n\n// An internal package may be imported only by another package\n// that is inside the tree rooted at the parent of the internal directory\npackage internal\n```\n\nSee: [Internal packages](https://go.dev/doc/go1.4#internalpackages)\n\n### Exporting names\n\n```go\n// Begin with a capital letter\nfunc Hello () {\n  \u00b7\u00b7\u00b7\n}\n```\n\nSee: [Exported names](https://tour.go.dev/basics/3)"
                },
                {
                    "title": "Concurrency",
                    "content": "### Goroutines\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc f(from string) {\n\tfor i := 0; i < 3; i++ {\n\t\tfmt.Println(from, \":\", i)\n\t}\n}\n\nfunc main() {\n\tf(\"direct\")\n\tgo f(\"goroutine\")\n\n\tgo func(msg string) {\n\t\tfmt.Println(msg)\n\t}(\"going\")\n\n\ttime.Sleep(time.Second)\n\tfmt.Println(\"done\")\n}\n```\n\n\nSee: [Goroutines](https://tour.go.dev/concurrency/1), [Channels](https://tour.go.dev/concurrency/2)\n\n\n\n\n### WaitGroup \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc w(id int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfmt.Printf(\"%d starting\\n\", id)\n\n\ttime.Sleep(time.Second)\n\tfmt.Printf(\"%d done\\n\", id)\n}\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\tfor i := 1; i <= 5; i++ {\n\t\twg.Add(1)\n\t\tgo w(i, &wg)\n\t}\n\twg.Wait()\n}\n```\nSee: [WaitGroup](https://go.dev/pkg/sync/#WaitGroup)\n\n\n\n\n### Closing channels\n\n```go\nch <- 1\nch <- 2\nch <- 3\nclose(ch) // Closes a channel\n```\n---\n```go\n// Iterate the channel until closed\nfor i := range ch {\n  \u00b7\u00b7\u00b7\n}\n```\n---\n```go\n// Closed if `ok == false`\nv, ok := <- ch\n```\n\nSee: [Range and close](https://tour.go.dev/concurrency/4)\n\n\n\n### Buffered channels\n\n```go\nch := make(chan int, 2)\nch <- 1\nch <- 2\nch <- 3\n// fatal error:\n// all goroutines are asleep - deadlock\n```\n\nSee: [Buffered channels](https://tour.go.dev/concurrency/3)"
                },
                {
                    "title": " Error control",
                    "content": "### Deferring functions \n\n```go\nfunc main() {\n  defer func() {\n    fmt.Println(\"Done\")\n  }()\n  fmt.Println(\"Working...\")\n}\n```\n\n\n### Lambda defer\n\n```go\nfunc main() {\n  var d = int64(0)\n  defer func(d *int64) {\n    fmt.Printf(\"& %v Unix Sec\\n\", *d)\n  }(&d)\n  fmt.Print(\"Done \")\n  d = time.Now().Unix()\n}\n```\n\nThe defer func uses current value of d, unless we use a pointer to get final value at end of main.\n\n\n\n\n### Defer\n\n```go\nfunc main() {\n  defer fmt.Println(\"Done\")\n  fmt.Println(\"Working...\")\n}\n```\n\nSee: [Defer, panic and recover](https://blog.go.dev/defer-panic-and-recover)"
                },
                {
                    "title": "Methods ",
                    "content": "### Receivers\n\n```go\ntype Vertex struct {\n  X, Y float64\n}\n```\n\n```go\nfunc (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X * v.X + v.Y * v.Y)\n}\n```\n\n\n```go\nv := Vertex{1, 2}\nv.Abs()\n```\n\nSee: [Methods](https://tour.go.dev/methods/1)\n\n### Mutation\n\n```go\nfunc (v *Vertex) Scale(f float64) {\n  v.X = v.X * f\n  v.Y = v.Y * f\n}\n```\n\n\n```go\nv := Vertex{6, 12}\nv.Scale(0.5)\n// `v` is updated\n```\n\nSee: [Pointer receivers](https://tour.go.dev/methods/4)"
                },
                {
                    "title": " Interfaces ",
                    "content": "### A basic interface\n\n```go\ntype Shape interface {\n  Area() float64\n  Perimeter() float64\n}\n```\n\n### Struct\n\n```go\ntype Rectangle struct {\n  Length, Width float64\n}\n```\n\nStruct `Rectangle` implicitly implements interface `Shape` by implementing all of its methods.\n\n### Methods\n\n```go\nfunc (r Rectangle) Area() float64 {\n  return r.Length * r.Width\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n  return 2 * (r.Length + r.Width)\n}\n```\n\nThe methods defined in `Shape` are implemented in `Rectangle`.\n\n### Interface example\n\n```go \nfunc main() {\n  var r Shape = Rectangle{Length: 3, Width: 4}\n  fmt.Printf(\"Type of r: %T, Area: %v, Perimeter: %v.\", r, r.Area(), r.Perimeter())\n}\n```"
                },
                {
                    "title": "Miscellaneous",
                    "content": "### Keywords\n\n- break\n- default\n- func\n- interface\n- select\n- case\n- defer\n- go\n- map\n- struct\n- chan\n- else\n- goto\n- package\n- switch\n- const\n- fallthrough\n- if\n- range\n- type\n- continue\n- for\n- import\n- return\n- var\n\n\n### Operators and punctuation\n|   |    |     |     |      |    |     |   |   |\n|---|----|-----|-----|------|----|-----|---|---|\n| + | &  | +=  | &=  | &&   | == | !=  | ( | ) |\n| - | \\| | -=  | \\|= | \\|\\| | <  | <=  | [ | ] |\n| * | ^  | *=  | ^=  | <-   | >  | >=  | { | } |\n| / | << | /=  | <<= | ++   | =  | :=  | , | ; |\n| % | >> | %=  | >>= | --   | !  | ... | . | : |\n|   | &^ | &^= |     |      |    |     |   |   |"
                }
            ]
        },
        {
            "title": "Rust",
            "tags": [
                "Rust"
            ],
            "categories": [
                "Programming"
            ],
            "background": "#401B21",
            "icon": "https://www.svgrepo.com/show/354302/rust.svg",
            "intro": "The Rust quick reference cheat sheet that aims at providing help on writing basic syntax and methods.\n",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "- [The Rust Document](https://doc.rust-lang.org/book/ch00-00-introduction.html) _(doc.rust-lang.org)_\n- [The Rust Reference](https://doc.rust-lang.org/reference/introduction.html) _(doc.rust-lang.org)_\n- [Rust Cheatsheet](https://phaiax.github.io/rust-cheatsheet/) _(phaiax.github.io)_\n\n### Hello_World.rs\n\n```rust\nfn main() {\n  println!(\"Hello, World!\");\n}\n```\n#### Compiling and Running\n```shell\n$ rustc Hello_World.rs\n$ ./Hello_World\nHello, World!\n```\n\n### Primitive types\n\n|                           |                                  |\n|---------------------------|----------------------------------|\n| `bool`                    | Boolean (`true` _/_ `false`)     |\n| `char`                    | character                        |\n| `f32`, `f64`              | 32-bits, 64-bits floats          |\n| `i64`, `i32`, `i16`, `i8` | signed 16- ... integers          |\n| `u64`, `u32`, `u16`, `u8` | unsigned 16-bits, ...  integers  |\n| `isize`                   | pointer-sized signed integers    |\n| `usize`                   | pointer-sized unsigned integers  |\n\n\n\n### Formatting\n\n```rust\n// Single Placeholder\nprintln!(\"{}\", 1);\n\n// Multiple Placeholder\nprintln!(\"{} {}\", 1, 3);\n\n// Positional Arguments\nprintln!(\"{0} is {1} {2}, also {0} is a {3} programming language\", \"Rust\", \"cool\", \"language\", \"safe\");\n\n// Named Arguments\nprintln!(\"{country} is a diverse nation with unity.\", country = \"India\");\n\n// Placeholder traits :b for binary, :0x is for hex and :o is octal\nprintln!(\"Let us print 76 is binary which is {:b} , and hex equivalent is {:0x} and octal equivalent is {:o}\", 76, 76, 76);\n\n// Debug Trait\nprintln!(\"Print whatever we want to here using debug trait {:?}\", (76, 'A', 90));\n\n// New Format Strings in 1.58\nlet x = \"world\";\nprintln!(\"Hello {x}!\");\n```\n\n\n### Printing Styles\n\n```rust\n// Prints the output\nprint!(\"Hello World\\n\");\n\n// Appends a new line after printing\nprintln!(\"Appending a new line\");\n\n// Prints as an error\neprint!(\"This is an error\\n\");\n\n// Prints as an error with new line\neprintln!(\"This is an error with new line\");\n```\n\n\n### Variables\n\n```rust\n// Initializing and declaring a variable\nlet some_variable = \"This_is_a_variable\";\n\n// Making a variable mutable\nlet mut mutable_variable = \"Mutable\";\n\n// Assigning multiple variables\nlet (name, age) = (\"ElementalX\", 20);\n\n// (Global) constant\nconst SCREAMING_SNAKE_CASE:i64 = 9;\n```\n\n\n\n### Comments\n\n```rust\n// Line Comments\n/*.............Block Comments */\n/// Outer doc comments\n//! Inner doc comments\n```\nSee: [Comments](https://doc.rust-lang.org/reference/comments.html)\n\n\n\n### Functions\n\n```rust\nfn test(){\n  println!(\"This is a function!\");\n}\n\nfn main(){\n  test();\n}\n```"
                },
                {
                    "title": "Types",
                    "content": "### Integer\n\n```rust\nlet mut a: u32 = 8;\nlet b: u64 = 877;\nlet c: i64 = 8999;\nlet d = -90;\n```\n\n\n### Floating-Point\n\n```rust\nlet mut sixty_bit_float: f64 = 89.90;\nlet thirty_two_bit_float: f32 = 7.90;\nlet just_a_float = 69.69;\n```\n\n\n### Boolean\n\n```rust \nlet true_val: bool = true;\nlet false_val: bool = false;\nlet just_a_bool = true;\nlet is_true = 8 < 5;  // => false\n```\n\n\n### Character\n\n```rust\nlet first_letter_of_alphabet = 'a';\nlet explicit_char: char = 'F';\nlet implicit_char = '8';\nlet emoji = \"\\u{1f600}\";   // => \ud83d\ude00\n```\n\n\n### String Literal\n\n```rust \nlet community_name = \"AXIAL\";\nlet no_of_members: &str = \"ten\";\n\nprintln!(\"The name of the community is {community_name} and it has {no_of_members} members\");\n```\n\n\n### Arrays\n\n```rust\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 92  | 97  | 98  | 99  | 98  | 94  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n   0     1     2     3     4     5\n```\n----\n\n```rust\nlet array: [i64; 6] = [92,97,98,99,98,94];\n```\n\n\n\n### Multi-Dimensional Array \n\n```rust\n     j0   j1   j2   j3   j4   j5\n   \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\ni0 | 1  | 2  | 3  | 4  | 5  | 6  |\n   \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\ni1 | 6  | 5  | 4  | 3  | 2  | 1  |\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n```\n----\n\n```rust\nlet array: [[i64; 6] ;2] = [\n            [1,2,3,4,5,6],\n            [6,5,4,3,2,1]];\n```\n\n### Mutable Array\n\n```rust\nlet mut array: [i32 ; 3] = [2,6,10];\n\narray[1] = 4;\narray[2] = 6;\n```\nUse the `mut` keyword to make it mutable.\n\n\n\n### Slices\n\n```rust\nlet mut array: [ i64; 4] = [1,2,3,4];\nlet mut slices: &[i64] = &array[0..3] // Lower range is inclusive and upper range is exclusive\n\nprintln!(\"The elements of the slices are : {slices:?}\");\n```\n\n\n### Vectors\n\n```rust\nlet some_vector = vec![1,2,3,4,5]; \n```\nA vector is declared using the `vec!` macro.\n\n\n### Tuples\n\n```rust\nlet tuple = (1, 'A' , \"Cool\", 78, true);\n```"
                },
                {
                    "title": "Strings",
                    "content": "### String Literal\n\n```rust\nlet cs:&str = \"cheat sheet\";\n\n// => Share cheat sheet for developers\nprintln!(\"Share {cs} for developers\");\n```\n\n\n### String Object\n\n```rust\n// Creating an empty string object\nlet my_string = String::new;\n\n// Converting to a string object\nlet S_string = a_string.to_string()\n\n// Creating an initialized string object\nlet lang = String::from(\"Rust\");  \nprintln!(\"First language is {lang}\");\n ```\n\n### .capacity()\n\n ```rust\nlet rand = String::from(\"Random String\");\nrand.capacity()  // => 13\n```\nCalculates the capacity of the string in bytes.\n\n\n### .contains()\n\n```rust\nlet name = String::from(\"ElementalX\");\nname.contains(\"Element\") // => true\n```\nChecks if the substring is contained inside the original string or not.\n\n\n### Pushing a single character\n\n```rust\nlet mut half_text = String::from(\"Hal\");\nhalf_text.push('f');    // => Half\n```\n\n\n### Pushing an entire String\n\n```rust\nlet mut hi = String::from(\"Hey there...\");\nhi.push_str(\"How are you doing??\");\n\n// => Hey there...How are you doing??\nprintln!(\"{hi}\");\n```"
                },
                {
                    "title": " Operators",
                    "content": "### Comparison Operators\n\n|          |                                  |\n|----------|----------------------------------|\n| `e == f` | `e` is equal to `f`              |\n| `e != f` | `e` is NOT equal to `f`          |\n| `e < f`  | `e` is less than `f`             |\n| `e > f`  | `e` is greater `f`               |\n| `e <= f` | `e` is less than or equal to `f` |\n| `e >= f` | `e` is greater or equal to `f`   |\n\n---------\n\n```rust\nlet (e, f) = (1, 100);\n\nlet greater = f > e;        // => true\nlet less = f < e;           // => false\nlet greater_equal = f >= e; // => true\nlet less_equal = e <= f;    // => true\nlet equal_to = e == f;      // => false\nlet not_equal_to = e != f;  // => true\n```\n\n\n### Arithmetic Operators\n\n|          |                                            |\n|----------|--------------------------------------------|\n| `a +  b` | `a` is added to `b`                        |\n| `a -  b` | `b` is subtracted from `a`                 |\n| `a /  b` | `a` is divided by `b`                      |\n| `a % b`  | Gets remainder of `a` by dividing with `b` |\n| `a * b`  | `a` is multiplied with `b`                 |\n\n------\n\n```rust\nlet (a, b) = (4, 5);\n\nlet sum: i32 = a + b;            // => 9\nlet subtractions: i32 = a - b;   // => -1\nlet multiplication: i32 = a * b; // => 20\nlet division: i32 = a / b;       // => 0\nlet modulus: i32 = a % b;        // => 4\n```\n\n\n\n\n### Bitwise Operators\n\n| Operator | Description             |\n|----------|-------------------------|\n| `g & h`  | Binary AND              |\n| `g | h`  | Binary OR               |\n| `g ^ h`  | Binary XOR              |\n| `!g`  | Binary one's complement |\n| `g << h` | Binary shift left       |\n| `g >> h` | Binary shift right      |\n\n-----\n\n```rust \nlet (g, h) = (0x1, 0x2);\n\nlet bitwise_and = g & h;  // => 0\nlet bitwise_or = g | h;   // => 3\nlet bitwise_xor = g ^ h;  // => 3\nlet right_shift = g >> 2; // => 0\nlet left_shift = h << 4;  // => 32 \n```\n\n\n\n### Logical Operators\n\n| Example        | Meaning                |\n|----------------|------------------------|\n| `c && d`       | Both are true _(AND)_  |\n| `c || d`       | Either is true _(OR)_  |\n| `!c`           | `c` is false _(NOT)_   |\n\n------\n\n```rust\nlet (c, d) = (true, false);\n\nlet and = c && d;  // => false\nlet or  = c || d;  // => true\nlet not = !c;      // => false\n```\n\n\n### Compound Assignment Operator\n\n```rust\nlet mut k = 9;\nlet mut l = k;\n```\n\n----\n\n| Operator  | Description                             |\n|-----------|-----------------------------------------|\n| `k += l`  | Add a value and assign, then k=9        |\n| `k -= l`  | Substrate a value and assign, then k=18 |\n| `k /= l`  | Divide a value and assign, then k=9     |\n| `k *= l`  | Multiply a value and assign, then k=81  |\n| `k |= l`  | Bitwise OR and assign, then k=89        |"
                },
                {
                    "title": "Flow Control",
                    "content": "### If Expression\n\n```rust\nlet case1: i32 = 81;\nlet case2: i32 = 82;\n\nif case1 < case2 {\n  println!(\"case1 is greater than case2\");\n}\n```\n\n### If...Else Expression\n\n```rust\nlet case3 = 8;\nlet case4 = 9;\n\nif case3 >= case4 {\n  println!(\"case3 is better than case4\");\n} else {\n  println!(\"case4 is greater than case3\");\n}\n```\n\n\n\n### If...Else...if...Else Expression\n\n```rust\nlet foo = 12;\nlet bar = 13;\n\nif foo == bar {\n  println!(\"foo is equal to bar\");\n} else if foo < bar {\n  println!(\"foo less than bar\");\n} else if foo != bar {\n  println!(\"foo is not equal to bar\");\n} else {\n  println!(\"Nothing\");\n}\n```\n\n\n### If...Let Expression \n\n```rust\nlet mut arr1:[i64 ; 3] = [1,2,3];\nif let[1,2,_] = arr1{\n    println!(\"Works with array\");\n}\n\nlet mut arr2:[&str; 2] = [\"one\", \"two\"];\nif let[\"Apple\", _] = arr2{\n    println!(\"Works with str array too\");\n}\n```\n----\n```rust\nlet tuple_1 = (\"India\", 7, 90, 90.432);\nif let(_, 7, 9, 78.99) = tuple_1{\n    println!(\"Works with tuples too\");\n}\n\nlet tuple_2 = ( 9, 7, 89, 12, \"Okay\");\nif let(9, 7,89, 12, blank) = tuple_2 {\n    println!(\"Everything {blank} mate?\");\n}\n\nlet tuple_3 = (89, 90, \"Yes\");\nif let(9, 89, \"Yes\") = tuple_3{\n    println!(\"Pattern did match\");\n}\nelse {\n    println!(\"Pattern did not match\");\n}\n```\n\n### Match Expression \n\n```rust\nlet day_of_week = 2;\nmatch day_of_week {\n  1 => {\n    println!(\"Its Monday my dudes\");\n  },\n  2 => {\n    println!(\"It's Tuesday my dudes\");\n  },\n  3 => {\n    println!(\"It's Wednesday my dudes\");\n  },\n  4 => {\n    println!(\"It's Thursday my dudes\");\n  },\n  5 => {\n    println!(\"It's Friday my dudes\");\n  },\n  6 => {\n    println!(\"It's Saturday my dudes\");\n  },\n  7 => {\n    println!(\"It's Sunday my dudes\");\n  },\n  _ => {\n    println!(\"Default!\")\n  }\n};\n```    \n\n\n### Nested...If Expression\n\n```rust\nlet nested_conditions = 89;\nif nested_conditions == 89 {\n    let just_a_value = 98;\n    if just_a_value >= 97 {\n        println!(\"Greater than 97\");\n    }\n}\n```    \n\n\n### For Loop\n\n```rust\nfor mut i in 0..15 {\n  i-=1;\n  println!(\"The value of i is : {i}\");\n}\n```\n\n\n\n### While Loop\n\n```rust\nlet mut check =  0;\nwhile check < 11{\n  println!(\"Check is : {check}\");\n  check+=1;\n  println!(\"After incrementing: {check}\");\n\n  if check == 10{\n    break; // stop while\n  }\n}\n```\n\n\n### Loop keyword\n\n```rust\nloop {\n  println!(\"hello world forever!\");\n}\n```\nThe infinite loop indicated.\n\n### Break Statement\n\n```rust\nlet mut i = 1;\nloop {\n  println!(\"i is {i}\");\n  if i > 100 {\n    break;\n  }\n  i *= 2;\n}\n```    \n\n\n### Continue Statement\n\n```rust\nfor (v, c) in (0..10+1).enumerate(){\n  println!(\"The {c} number loop\");\n  if v == 9{\n    println!(\"Here we go continue?\");\n    continue;\n  }\n  println!{\"The value of v is : {v}\"};\n}\n```"
                },
                {
                    "title": "Functions",
                    "content": "### Basic function\n\n```rust\n\nfn print_message(){\n  println!(\"Hello, CheatSheets.zip!\");\n}\n\nfn main(){\n  //Invoking a function in Rust.\n  print_message();\n}\n```\n\n### Pass by Value\n\n```rust\nfn main()\n{\n  let x:u32 = 10;\n  let y:u32 = 20;\n  \n  // => 200\n  println!(\"Calc: {}\", cal_rect(x, y));\n}\nfn cal_rect(x:u32, y:u32) -> u32\n{\n  x * y\n}\n```\n\n### Pass by Reference\n\n```rust\nfn main(){\n  let mut by_ref = 3;      // => 3\n  power_of_three(&mut by_ref);\n  println!(\"{by_ref}\");  // => 9\n}\n\nfn power_of_three(by_ref: &mut i32){\n  // de-referencing is important\n  *by_ref = *by_ref * *by_ref;\n  println!(\"{by_ref}\");  // => 9\n}\n```\n\n\n\n### Returns \n\n```rust \nfn main(){\n  let (mut radius, mut pi) = (3.0, 3.14);\n  let(area, _perimeter) = calculate (\n      &mut radius,\n      &mut pi\n  );\n  println!(\"The area and the perimeter of the circle are: {area} & {_perimeter}\");\n}\n\nfn calculate(radius : &mut f64, pi: &mut f64) -> (f64, f64){\n  let perimeter = 2.0 * *pi * *radius;\n  let area = *pi * *radius * *radius;\n  return (area, perimeter);\n}\n```\n\n### Arrays as Arguments\n\n```rust\nfn main(){\n  let mut array: [i32 ; 5] = [1,2,3,4,6];\n  print_arrays(array);\n  println!(\"The elements: {array:?}\");\n}\n\nfn print_arrays(mut array:[i32; 5]) {\n  array[0] = 89;\n  array[1] = 90;\n  array[2] = 91;\n  array[3] = 92;\n  array[4] = 93;\n  println!(\"The elements: {array:?}\");\n}\n```\n\n### Returning Arrays\n\n```rust\n\nfn main(){\n  let mut arr:[i32; 5] = [2,4,6,8,10];\n  multiply(arr);\n  println!(\"The array is : {:?}\", multiply(arr));\n}\n\nfn multiply (mut arr: [i32 ; 5]) -> [i32 ; 5]{\n  arr[2] = 90;\n  for mut i in 0..5 {\n      arr[i] = arr[i] * arr[2];\n  }\n  return arr;\n}\n```"
                },
                {
                    "title": "Misc",
                    "content": "### Type Casting\n\n```rust\nlet a_int = 90; // int\n// int to float\nlet mut type_cast = (a_int as f64);\n```\n\n------\n\n```rust\nlet orginal: char = 'I';\n// char to int => 73\nlet type_casted: i64 = orginal as i64;\n```\n\nTo perform type-casting in Rust one must use the `as` keyword.\n\n\n\n\n### Borrowing\n\n```rust\nlet mut foo = 4;\nlet mut borrowed_foo = &foo;\nprintln!(\"{borrowed_foo}\");\n```\n\n------\n\n```rust\nlet mut bar = 3;\nlet mut mutable_borrowed_bar = &mut bar;\nprintln!(\"{mutable_borrowed_bar}\");\n```\n\nHere borrowed value borrows the value from value one using `&` operator.\n\n\n\n### De-referencing\n\n```rust\nlet mut borrow = 10;\nlet deref = &mut borrow;\n\nprintln!(\"{}\", *deref);\n```\n\nDe-referencing in rust can be done using the `*` operator\n\n\n### Variable Scope\n```rust\n{\n  // The scope limited to this braces\n  let a_number = 1;\n}\nprintln!(\"{a_number}\");\n```\nThis will produce error as the scope of the variable `a_number` ends at the braces"
                }
            ]
        },
        {
            "title": "JavaScript",
            "tags": [
                "js",
                "javascript",
                "java",
                "web"
            ],
            "categories": [
                "Programming"
            ],
            "background": null,
            "icon": "https://www.svgrepo.com/show/372884/javascript-1.svg",
            "intro": "A JavaScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.\n",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "### Introduction\nJavaScript is a lightweight, interpreted programming language.\n\n- [JSON cheatsheet](/json) _(cheatsheets.zip)_\n- [Regex in JavaScript](/regex#regex-in-javascript) _(cheatsheets.zip)_\n\n\n### Console\n\n```javascript\n// => Hello world!\nconsole.log('Hello world!');\n\n// => Hello CheatSheets.zip\nconsole.warn('hello %s', 'CheatSheets.zip');\n\n// Prints error message to stderr\nconsole.error(new Error('Oops!'));\n```\n\n\n### Numbers\n\n```javascript\nlet amount = 6;\nlet price = 4.99;\n```\n\n\n\n### Variables\n\n```javascript\nlet x = null;\nlet name = \"Tammy\";\nconst found = false;\n\n// => Tammy, false, null\nconsole.log(name, found, x);\n\nvar a;\nconsole.log(a); // => undefined\n```\n\n\n### Strings\n\n```javascript\nlet single = 'Wheres my bandit hat?';\nlet double = \"Wheres my bandit hat?\";\n\n// => 21\nconsole.log(single.length);\n\n```\n\n\n\n### Arithmetic Operators\n\n```javascript\n5 + 5 = 10     // Addition\n10 - 5 = 5     // Subtraction\n5 * 10 = 50    // Multiplication\n10 / 5 = 2     // Division\n10 % 5 = 0     // Modulo\n```\n\n\n### Comments\n\n```javascript\n// This line will denote a comment\n\n/*  \nThe below configuration must be \nchanged before deployment. \n*/\n\n```\n\n\n### Assignment Operators\n\n```javascript\nlet number = 100;\n\n// Both statements will add 10\nnumber = number + 10;\nnumber += 10;\n\nconsole.log(number); \n// => 120\n```\n\n\n### String Interpolation\n\n```javascript\nlet age = 7;\n\n// String concatenation\n'Tommy is ' + age + ' years old.';\n\n// String interpolation\n`Tommy is ${age} years old.`;\n```\n\n\n\n\n### let Keyword\n\n```javascript\nlet count; \nconsole.log(count); // => undefined\ncount = 10;\nconsole.log(count); // => 10\n```\n\n\n### const Keyword\n\n```javascript\nconst numberOfColumns = 4;\n\n// TypeError: Assignment to constant...\nnumberOfColumns = 8;\n```"
                },
                {
                    "title": "Conditionals",
                    "content": "### if Statement\n\n```javascript\nconst isMailSent = true;\n\nif (isMailSent) {\n  console.log('Mail sent to recipient');\n}\n```\n\n\n\n### Ternary Operator\n\n```javascript\nvar x=1;\n\n// => true\nresult = (x == 1) ? true : false;\n```\n\n\n### Operators \n\n```javascript\ntrue || false;       // true\n10 > 5 || 10 > 20;   // true\nfalse || false;      // false\n10 > 100 || 10 > 20; // false\n```\n#### Logical Operator &&\n```javascript\ntrue && true;        // true\n1 > 2 && 2 > 1;      // false\ntrue && false;       // false\n4 === 4 && 3 > 1;    // true\n```\n#### Comparison Operators\n```javascript\n1 > 3                // false\n3 > 1                // true\n250 >= 250           // true\n1 === 1              // true\n1 === 2              // false\n1 === '1'            // false\n```\n#### Logical Operator !\n```javascript\nlet lateToWork = true;\nlet oppositeValue = !lateToWork;\n\n// => false\nconsole.log(oppositeValue); \n```\n#### Nullish coalescing operator ??\n```javascript\nnull ?? 'I win';           //  'I win'\nundefined ?? 'Me too';     //  'Me too'\n\nfalse ?? 'I lose'          //  false\n0 ?? 'I lose again'        //  0\n'' ?? 'Damn it'            //  ''\n```\n\n\n\n### else if\n\n```javascript\nconst size = 10;\n\nif (size > 100) {\n  console.log('Big');\n} else if (size > 20) {\n  console.log('Medium');\n} else if (size > 4) {\n  console.log('Small');\n} else {\n  console.log('Tiny');\n}\n// Print: Small\n```\n\n\n\n\n### switch Statement\n\n```javascript\nconst food = 'salad';\n\nswitch (food) {\n  case 'oyster':\n    console.log('The taste of the sea');\n    break;\n  case 'pizza':\n    console.log('A delicious pie');\n    break;\n  default:\n    console.log('Enjoy your meal');\n}\n```\n\n### == vs ===\n```javascript\n0 == false   // true\n0 === false  // false, different type\n1 == \"1\"     // true,  automatic type conversion \n1 === \"1\"    // false, different type\nnull == undefined  // true\nnull === undefined // false\n'0' == false       // true\n'0' === false      // false\n```\nThe `==` just check the value, `===` check both the value and the type."
                },
                {
                    "title": "Functions",
                    "content": "### Functions\n\n```javascript\n// Defining the function:\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function:\nsum(3, 6); // 9\n```\n\n\n### Anonymous Functions\n\n```javascript\n// Named function\nfunction rocketToMars() {\n  return 'BOOM!';\n}\n\n// Anonymous function\nconst rocketToMars = function() {\n  return 'BOOM!';\n}\n```\n\n\n\n### Arrow Functions (ES6) \n#### With two arguments \n```javascript\nconst sum = (param1, param2) => { \n  return param1 + param2; \n}; \nconsole.log(sum(2,5)); // => 7 \n```\n#### With no arguments \n```javascript\nconst printHello = () => { \n  console.log('hello'); \n}; \nprintHello(); // => hello\n```\n#### With a single argument \n```javascript\nconst checkWeight = weight => { \n  console.log(`Weight : ${weight}`); \n}; \ncheckWeight(25); // => Weight : 25 \n```\n#### Concise arrow functions\n```javascript\nconst multiply = (a, b) => a * b; \n// => 60 \nconsole.log(multiply(2, 30)); \n```\n[Arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) available starting ES2015\n\n\n\n### return Keyword\n\n```javascript\n// With return\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// The function doesn't output the sum\nfunction sum(num1, num2) {\n  num1 + num2;\n}\n```\n\n\n### Calling Functions\n\n```javascript\n// Defining the function\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function\nsum(2, 4); // 6\n```\n\n\n\n### Function Expressions\n\n```javascript\nconst dog = function() {\n  return 'Woof!';\n}\n```\n\n\n### Function Parameters\n\n```javascript\n// The parameter is name\nfunction sayHello(name) {\n  return `Hello, ${name}!`;\n}\n```\n\n\n### Function Declaration\n\n```javascript\nfunction add(num1, num2) {\n  return num1 + num2;\n}\n```"
                },
                {
                    "title": "Scope ",
                    "content": "### Scope\n\n```javascript\nfunction myFunction() {\n  \n  var pizzaName = \"Margarita\";\n  // Code here can use pizzaName\n  \n}\n\n// Code here can't use pizzaName\n```\n\n\n### Block Scoped Variables\n\n```javascript\nconst isLoggedIn = true;\n\nif (isLoggedIn == true) {\n  const statusMessage = 'Logged in.';\n}\n\n// Uncaught ReferenceError...\nconsole.log(statusMessage);\n\n```\n\n\n### Global Variables\n\n```javascript\n// Variable declared globally\nconst color = 'blue';\n\nfunction printColor() {\n  console.log(color);\n}\n\nprintColor(); // => blue\n```\n\n\n### let vs var\n```javascript\nfor (let i = 0; i < 3; i++) {\n  // This is the Max Scope for 'let'\n  // i accessible \u2714\ufe0f\n}\n// i not accessible \u274c\n\n```\n---\n```javascript\nfor (var i = 0; i < 3; i++) {\n  // i accessible \u2714\ufe0f\n}\n// i accessible \u2714\ufe0f\n```\n`var` is scoped to the nearest function block, and `let` is scoped to the nearest enclosing block.\n\n### Loops with closures\n```javascript\n// Prints 3 thrice, not what we meant.\nfor (var i = 0; i < 3; i++) {\n  setTimeout(_ => console.log(i), 10);\n}\n```\n---\n```javascript\n// Prints 0, 1 and 2, as expected.\nfor (let j = 0; j < 3; j++) { \n  setTimeout(_ => console.log(j), 10);\n}\n```\nThe variable has its own copy using `let`, and the variable has shared copy using `var`."
                },
                {
                    "title": "Arrays ",
                    "content": "### Arrays\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\n// Different data types\nconst data = [1, 'chicken', false];\n```\n\n### Property .length\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nnumbers.length // 4\n```\n\n\n### Index\n\n```javascript\n// Accessing an array element\nconst myArray = [100, 200, 300];\n\nconsole.log(myArray[0]); // 100\nconsole.log(myArray[1]); // 200\n```\n\n\n### Mutable chart\n|           | add | remove | start | end |\n|:----------|:---:|:------:|:-----:|:---:|\n| `push`    | \u2714   |        |       | \u2714   |\n| `pop`     |     | \u2714      |       | \u2714   |\n| `unshift` | \u2714   |        | \u2714     |     |\n| `shift`   |     | \u2714      | \u2714     |     |\n\n\n\n### Method .push()\n\n```javascript\n// Adding a single element:\nconst cart = ['apple', 'orange'];\ncart.push('pear'); \n\n// Adding multiple elements:\nconst numbers = [1, 2];\nnumbers.push(3, 4, 5);\n```\nAdd items to the end and returns the new array length.\n\n\n### Method .pop()\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nconst fruit = fruits.pop(); // 'banana'\nconsole.log(fruits); // [\"apple\", \"orange\"]\n```\nRemove an item from the end and returns the removed item.\n\n\n### Method .shift()\n\n```javascript\nlet cats = ['Bob', 'Willy', 'Mini'];\n\ncats.shift(); // ['Willy', 'Mini']\n```\nRemove an item from the beginning and returns the removed item.\n\n\n### Method .unshift()\n\n```javascript\nlet cats = ['Bob'];\n\n// => ['Willy', 'Bob']\ncats.unshift('Willy');\n\n// => ['Puff', 'George', 'Willy', 'Bob']\ncats.unshift('Puff', 'George');\n```\nAdd items to the beginning and returns the new array length.\n\n\n\n\n### Method .concat()\n```javascript\nconst numbers = [3, 2, 1]\nconst newFirstNumber = 4\n    \n// => [ 4, 3, 2, 1 ]\n[newFirstNumber].concat(numbers)\n    \n// => [ 3, 2, 1, 4 ]\nnumbers.concat(newFirstNumber)\n```\nif you want to avoid mutating your original array, you can use concat."
                },
                {
                    "title": "JavaScipt Set",
                    "content": "### Create Set\n\n```javascript\n// Empty Set Object\nconst emptySet = new Set()\n\n// Set Object with values\nconst setObj = new Set([1, true, \"hi\"])\n```\n\n\n### Add\n\n```javascript\nconst emptySet = new Set()\n\n// add values\nemptySet.add('a')   // 'a'\nemptySet.add(1)     // 'a', 1\nemptySet.add(true)  // 'a', 1, true\nemptySet.add('a')   // 'a', 1, true\n```\n\n\n### Delete\n\n```javascript\nconst emptySet = new Set([1, true, 'a'])\n\n// delete values\nemptySet.delete('a')    // 1, true\nemptySet.delete(true)   // 1\nemptySet.delete(1)      //\n```\n\n\n### Has\n\n```javascript\nconst setObj = new Set([1, true, 'a'])\n\n// returns true or false\nsetObj.has('a')     // true\nsetObj.has(1)       // true\nsetObj.has(false)   // false\n```\n\n\n### Clear\n\n```javascript\nconst setObj = new Set([1, true, 'a'])\n\n// clears the set\nconsole.log(setObj)   // 1, true, 'a'\nsetObj.clear()        //\n```\n\n\n### Size\n\n```javascript\nconst setObj = new Set([1, true, 'a'])\n\nconsoloe.log(setObj.size)   // 3\n```\n\n\n### ForEach\n\n```javascript\nconst setObj = new Set([1, true, 'a'])\n\nsetObj.forEach(function(value){\n  console.log(value)\n})\n\n// 1\n// true\n// 'a'\n```"
                },
                {
                    "title": "Loops ",
                    "content": "### While Loop\n\n```javascript\nwhile (condition) {\n  // code block to be executed\n}\n\nlet i = 0;\nwhile (i < 5) {        \n  console.log(i);\n  i++;\n}\n```\n\n\n### Reverse Loop\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let i = fruits.length - 1; i >= 0; i--) {\n  console.log(`${i}. ${fruits[i]}`);\n}\n\n// => 2. banana\n// => 1. orange\n// => 0. apple\n```\n\n\n### Do\u2026While Statement\n\n```javascript\nx = 0\ni = 0\n\ndo {\n  x = x + i;\n  console.log(x)\n  i++;\n} while (i < 5);\n// => 0 1 3 6 10\n```\n\n\n### For Loop\n\n```javascript\nfor (let i = 0; i < 4; i += 1) {\n  console.log(i);\n};\n\n// => 0, 1, 2, 3\n```\n\n\n### Looping Through Arrays\n\n```javascript\nfor (let i = 0; i < array.length; i++){\n  console.log(array[i]);\n}\n\n// => Every item in the array\n```\n\n\n### Break\n\n```javascript\nfor (let i = 0; i < 99; i += 1) {\n  if (i > 5) {\n     break;\n  }\n  console.log(i)\n}\n// => 0 1 2 3 4 5\n```\n\n### Continue\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 3) { continue; }\n  text += \"The number is \" + i + \"<br>\";\n}\n```\n\n\n### Nested\n\n```javascript\nfor (let i = 0; i < 2; i += 1) {\n  for (let j = 0; j < 3; j += 1) {\n    console.log(`${i}-${j}`);\n  }\n}\n```\n\n\n\n### for...in loop\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let index in fruits) {\n  console.log(index);\n}\n// => 0\n// => 1\n// => 2\n```\n\n### for...of loop\n\n```javascript\nconst fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n// => apple\n// => orange\n// => banana\n```"
                },
                {
                    "title": "Iterators ",
                    "content": "### Functions Assigned to Variables\n\n```javascript\nlet plusFive = (number) => {\n  return number + 5;  \n};\n// f is assigned the value of plusFive\nlet f = plusFive;\n\nplusFive(3); // 8\n// Since f has a function value, it can be invoked. \nf(9); // 14\n\n```\n\n\n### Callback Functions\n\n```javascript\nconst isEven = (n) => {\n  return n % 2 == 0;\n}\n\nlet printMsg = (evenFunc, num) => {\n  const isNumEven = evenFunc(num);\n  console.log(`${num} is an even number: ${isNumEven}.`)\n}\n\n// Pass in isEven as the callback function\nprintMsg(isEven, 4); \n// => The number 4 is an even number: True.\n```\n\n### Array Method .reduce()\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nconst sum = numbers.reduce((accumulator, curVal) => {  \n  return accumulator + curVal;\n});\n\nconsole.log(sum); // 10\n```\n\n\n### Array Method .map()\n\n```javascript\nconst members = [\"Taylor\", \"Donald\", \"Don\", \"Natasha\", \"Bobby\"];\n\nconst announcements = members.map((member) => {\n  return member + \" joined the contest.\";\n});\n\nconsole.log(announcements);\n```\n\n\n### Array Method .forEach()\n\n```javascript\nconst numbers = [28, 77, 45, 99, 27];\n\nnumbers.forEach(number => {  \n  console.log(number);\n}); \n```\n\n\n### Array Method .filter()\n\n```javascript\nconst randomNumbers = [4, 11, 42, 14, 39];\nconst filteredArray = randomNumbers.filter(n => {  \n  return n > 5;\n});\n```"
                },
                {
                    "title": "Objects ",
                    "content": "### Accessing Properties\n\n```javascript\nconst apple = { \n  color: 'Green',\n  price: { bulk: '$3/kg', smallQty: '$4/kg' }\n};\nconsole.log(apple.color); // => Green\nconsole.log(apple.price.bulk); // => $3/kg\n```\n\n\n### Naming Properties\n\n```javascript\n// Example of invalid key names\nconst trainSchedule = {\n  // Invalid because of the space between words.\n  platform num: 10, \n  // Expressions cannot be keys.\n  40 - 10 + 2: 30,\n  // A + sign is invalid unless it is enclosed in quotations.\n  +compartment: 'C'\n}\n```\n\n\n\n### Non-existent properties\n\n```javascript\nconst classElection = {\n  date: 'January 12'\n};\n\nconsole.log(classElection.place); // undefined\n```\n\n\n### Mutable \n\n```javascript\nconst student = {\n  name: 'Sheldon',\n  score: 100,\n  grade: 'A',\n}\n\nconsole.log(student)\n// { name: 'Sheldon', score: 100, grade: 'A' }\n\ndelete student.score\nstudent.grade = 'F'\nconsole.log(student)\n// { name: 'Sheldon', grade: 'F' }\n\nstudent = {}\n// TypeError: Assignment to constant variable.\n```\n\n\n\n### Assignment shorthand syntax\n\n```javascript\nconst person = {\n  name: 'Tom',\n  age: '22',\n};\nconst {name, age} = person;\nconsole.log(name); // 'Tom'\nconsole.log(age);  // '22'\n```\n\n\n\n\n### Delete operator\n\n```javascript\nconst person = {\n  firstName: \"Matilda\",\n  age: 27,\n  hobby: \"knitting\",\n  goal: \"learning JavaScript\"\n};\n\ndelete person.hobby; // or delete person[hobby];\n\nconsole.log(person);\n/*\n{\n  firstName: \"Matilda\"\n  age: 27\n  goal: \"learning JavaScript\"\n}\n*/\n\t\n```\n\n\n### Objects as arguments\n\n```javascript\nconst origNum = 8;\nconst origObj = {color: 'blue'};\n\nconst changeItUp = (num, obj) => {\n  num = 7;\n  obj.color = 'red';\n};\n\nchangeItUp(origNum, origObj);\n\n// Will output 8 since integers are passed by value.\nconsole.log(origNum);\n\n// Will output 'red' since objects are passed \n// by reference and are therefore mutable.\nconsole.log(origObj.color);\n```\n\n\n### Shorthand object creation\n\n```javascript\nconst activity = 'Surfing';\nconst beach = { activity };\nconsole.log(beach); // { activity: 'Surfing' }\n```\n\n\n### this Keyword\n\n```javascript\nconst cat = {\n  name: 'Pipey',\n  age: 8,\n  whatName() {\n    return this.name  \n  }\n};\nconsole.log(cat.whatName()); // => Pipey\n```\n\n\n\n### Factory functions\n\n```javascript\n// A factory function that accepts 'name', \n// 'age', and 'breed' parameters to return \n// a customized dog object. \nconst dogFactory = (name, age, breed) => {\n  return {\n    name: name,\n    age: age,\n    breed: breed,\n    bark() {\n      console.log('Woof!');  \n    }\n  };\n};\n\n```\n\n\n### Methods\n\n```javascript\nconst engine = {\n  // method shorthand, with one argument\n  start(adverb) {\n    console.log(`The engine starts up ${adverb}...`);\n  },  \n  // anonymous arrow function expression with no arguments\n  sputter: () => {\n    console.log('The engine sputters...');\n  },\n};\n\nengine.start('noisily');\nengine.sputter();\n```\n\n\n### Getters and setters\n\n```javascript\nconst myCat = {\n  _name: 'Dottie',\n  get name() {\n    return this._name;  \n  },\n  set name(newName) {\n    this._name = newName;  \n  }\n};\n\n// Reference invokes the getter\nconsole.log(myCat.name);\n\n// Assignment invokes the setter\nmyCat.name = 'Yankee';\n```"
                },
                {
                    "title": "Classes",
                    "content": "### Static Methods\n\n```javascript\nclass Dog {\n  constructor(name) {\n    this._name = name;  \n  }\n  \n  introduce() { \n    console.log('This is ' + this._name + ' !');  \n  }\n  \n  // A static method\n  static bark() {\n    console.log('Woof!');  \n  }\n}\n\nconst myDog = new Dog('Buster');\nmyDog.introduce();\n\n// Calling the static method\nDog.bark();\n```\n\n\n### Class\n\n```javascript\nclass Song {\n  constructor() {\n    this.title;\n    this.author;\n  }\n  \n  play() {\n    console.log('Song playing!');\n  }\n}\n\nconst mySong = new Song();\nmySong.play();\n```\n\n\n### Class Constructor\n\n```javascript\nclass Song {\n  constructor(title, artist) {\n    this.title = title;\n    this.artist = artist;\n  }\n}\n\nconst mySong = new Song('Bohemian Rhapsody', 'Queen');\nconsole.log(mySong.title);\n```\n\n\n### Class Methods\n\n```javascript\nclass Song {\n  play() {\n    console.log('Playing!');\n  }\n  \n  stop() {\n    console.log('Stopping!');\n  }\n}\n```\n\n\n### extends\n\n```javascript\n// Parent class\nclass Media {\n  constructor(info) {\n    this.publishDate = info.publishDate;\n    this.name = info.name;\n  }\n}\n\n// Child class\nclass Song extends Media {\n  constructor(songData) {\n    super(songData);\n    this.artist = songData.artist;\n  }\n}\n\nconst mySong = new Song({ \n  artist: 'Queen', \n  name: 'Bohemian Rhapsody', \n  publishDate: 1975\n});\n```"
                },
                {
                    "title": "Modules ",
                    "content": "### Export \n\n```javascript\n// myMath.js\n\n// Default export\nexport default function add(x,y){\n    return x + y\n}\n\n// Normal export\nexport function subtract(x,y){\n    return x - y\n}\n\n// Multiple exports\nfunction multiply(x,y){\n    return x * y\n}\nfunction duplicate(x){\n    return x * 2\n}\nexport {\n    multiply,\n    duplicate\n}\n```\n\n\n### Import \n\n```javascript\n// main.js\nimport add, { subtract, multiply, duplicate } from './myMath.js';\n\nconsole.log(add(6, 2)); // 8 \nconsole.log(subtract(6, 2)) // 4\nconsole.log(multiply(6, 2)); // 12\nconsole.log(duplicate(5)) // 10\n\n// index.html\n<script type=\"module\" src=\"main.js\"></script>\n```\n\n\n### Export Module\n\n```javascript\n// myMath.js\n\nfunction add(x,y){\n    return x + y\n}\nfunction subtract(x,y){\n    return x - y\n}\nfunction multiply(x,y){\n    return x * y\n}\nfunction duplicate(x){\n    return x * 2\n}\n\n// Multiple exports in node.js\nmodule.exports = {\n    add,\n    subtract,\n    multiply,\n    duplicate\n}\n```\n\n\n### Require Module\n\n```javascript\n// main.js\nconst myMath = require('./myMath.js')\n\nconsole.log(myMath.add(6, 2)); // 8 \nconsole.log(myMath.subtract(6, 2)) // 4\nconsole.log(myMath.multiply(6, 2)); // 12\nconsole.log(myMath.duplicate(5)) // 10\n```"
                },
                {
                    "title": "Promises ",
                    "content": "### Promise states  \n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  const res = true;\n  // An asynchronous operation.\n  if (res) {\n    resolve('Resolved!');\n  }\n  else {\n    reject(Error('Error'));\n  }\n});\n\npromise.then((res) => console.log(res), (err) => console.error(err));\n```\n\n\n### Executor function\n\n```javascript\nconst executorFn = (resolve, reject) => {\n  resolve('Resolved!');\n};\n\nconst promise = new Promise(executorFn);\n```\n\n\n### setTimeout()\n\n```javascript\nconst loginAlert = () =>{\n  console.log('Login');\n};\n\nsetTimeout(loginAlert, 6000);\n```\n\n\n\n### .then() method\n\n```javascript\nconst promise = new Promise((resolve, reject) => {    \n  setTimeout(() => {\n    resolve('Result');\n  }, 200);\n});\n\npromise.then((res) => {\n  console.log(res);\n}, (err) => {\n  console.error(err);\n});\n```\n\n\n### .catch() method\n\n```javascript\nconst promise = new Promise((resolve, reject) => {  \n  setTimeout(() => {\n    reject(Error('Promise Rejected Unconditionally.'));\n  }, 1000);\n});\n\npromise.then((res) => {\n  console.log(value);\n});\n\npromise.catch((err) => {\n  console.error(err);\n});\n```\n\n\n### Promise.all()\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(3);\n  }, 300);\n});\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(2);\n  }, 200);\n});\n\nPromise.all([promise1, promise2]).then((res) => {\n  console.log(res[0]);\n  console.log(res[1]);\n});\n```\n\n\n### Avoiding nested Promise and .then()\n\n```javascript\nconst promise = new Promise((resolve, reject) => {  \n  setTimeout(() => {\n    resolve('*');\n  }, 1000);\n});\n\nconst twoStars = (star) => {  \n  return (star + star);\n};\n\nconst oneDot = (star) => {  \n  return (star + '.');\n};\n\nconst print = (val) => {\n  console.log(val);\n};\n\n// Chaining them all together\npromise.then(twoStars).then(oneDot).then(print);\n```\n\n\n\n### Creating\n\n```javascript\nconst executorFn = (resolve, reject) => {\n  console.log('The executor function of the promise!');\n};\n\nconst promise = new Promise(executorFn);\n```\n\n### Chaining multiple .then()\n\n```javascript\nconst promise = new Promise(resolve => setTimeout(() => resolve('dAlan'), 100));\n\npromise.then(res => {\n  return res === 'Alan' ? Promise.resolve('Hey Alan!') : Promise.reject('Who are you?')\n}).then((res) => {\n  console.log(res)\n}, (err) => {\n  console.error(err)\n});\n```\n\n### Fake http Request with Promise\n\n```javascript\nconst mock = (success, timeout = 1000) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if(success) {\n        resolve({status: 200, data:{}});\n      } else {\n        reject({message: 'Error'});\n      }\n    }, timeout);\n  });\n}\nconst someEvent = async () => {\n  try {\n    await mock(true, 1000);\n  } catch (e) {\n    console.log(e.message);\n  }\n}\n```"
                },
                {
                    "title": "Async-Await ",
                    "content": "### Asynchronous\n\n```javascript\nfunction helloWorld() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Hello World!');\n    }, 2000);\n  });\n}\n\nconst msg = async function() { //Async Function Expression\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n}\n\nconst msg1 = async () => { //Async Arrow Function\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\nmsg1(); // Message: Hello World! <-- after 2 seconds\n```\n\n\n### Resolving Promises\n\n```javascript\nlet pro1 = Promise.resolve(5);\nlet pro2 = 44;\nlet pro3 = new Promise(function(resolve, reject) {\n  setTimeout(resolve, 100, 'foo');\n});\n\nPromise.all([pro1, pro2, pro3]).then(function(values) {\n  console.log(values);\n});\n// expected => Array [5, 44, \"foo\"]\n```\n\n\n### Async Await Promises\n\n```javascript\nfunction helloWorld() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Hello World!');\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\n```\n\n\n### Error Handling\n\n```javascript\nlet json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n  let user = JSON.parse(json); // <-- no errors\n  console.log( user.name ); // no name!\n} catch (e) {\n  console.error( \"Invalid JSON data!\" );\n}\n```\n\n\n### Aysnc await operator\n\n```javascript\nfunction helloWorld() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Hello World!');\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\n```"
                },
                {
                    "title": "Requests",
                    "content": "### JSON \n\n```json\nconst jsonObj = {\n  \"name\": \"Rick\",\n  \"id\": \"11A\",\n  \"level\": 4  \n};\n```\n\n\n\n### XMLHttpRequest\n\n```javascript\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', 'mysite.com/getjson');\n```\n`XMLHttpRequest` is a browser-level API that enables the client to script data transfers via JavaScript, NOT part of the JavaScript language.\n\n\n\n### GET\n\n```javascript\nconst req = new XMLHttpRequest();\nreq.responseType = 'json';\nreq.open('GET', '/getdata?id=65');\nreq.onload = () => {\n  console.log(xhr.response);\n};\n\nreq.send();\n```\n\n\n### POST \n\n```javascript\nconst data = {\n  fish: 'Salmon',\n  weight: '1.5 KG',\n  units: 5\n};\nconst xhr = new XMLHttpRequest();\nxhr.open('POST', '/inventory/add');\nxhr.responseType = 'json';\nxhr.send(JSON.stringify(data));\n\nxhr.onload = () => {\n  console.log(xhr.response);\n};\n```\n\n\n### fetch api \n\n```javascript\nfetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'apikey': apiKey\n    },\n    body: data\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message)\n  })\n}\n```\n\n\n### JSON Formatted\n\n```javascript\nfetch('url-that-returns-JSON')\n.then(response => response.json())\n.then(jsonResponse => {\n  console.log(jsonResponse);\n});\n```\n\n\n### promise url parameter fetch api\n\n```javascript\nfetch('url')\n.then(\n  response  => {\n    console.log(response);\n  },\n rejection => {\n    console.error(rejection.message);\n);\n```\n\n\n### Fetch API Function\n\n```javascript\nfetch('https://api-xxx.com/endpoint', {\n  method: 'POST',\n body: JSON.stringify({id: \"200\"})\n}).then(response => {\n  if(response.ok){\n\t  return response.json();  \n  }\n\tthrow new Error('Request failed!');\n}, networkError => {\n  console.log(networkError.message);\n}).then(jsonResponse => {\n  console.log(jsonResponse);\n})\n```\n\n\n### async await syntax \n\n```javascript\nconst getSuggestions = async () => {\n  const wordQuery = inputField.value;\n  const endpoint = `${url}${queryParams}${wordQuery}`;\n  try{\nconst response = await fetch(endpoint, {cache: 'no-cache'});\n    if(response.ok){\n      const jsonResponse = await response.json()\n    }\n  }\n  catch(error){\n    console.log(error)\n  }\n}\n```"
                }
            ]
        },
        {
            "title": "Dart",
            "tags": [
                "dart",
                "flutter"
            ],
            "categories": [
                "Programming"
            ],
            "background": "#58aee9",
            "icon": "https://www.svgrepo.com/show/473578/dart.svg",
            "intro": "A Dart cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "### hello.dart\n\nEvery app has a `main()` function\n\n```dart\n// top-level function where app execution starts\nvoid main(){\n    print(\"Hello World!\"); // Print to console\n}\n```\n\n### Variables\n\n```dart\nint x = 2; // explicitly typed\nvar p = 5; // type inferred - Generic var with type inference\n\ndynamic z = 8; // variable can take on any type\nz = \"cool\"; // cool\n\n// if you never intend to change a variable use final or const. Something like this:\n\nfinal email = \"temid@gmail.com\"; // Same as var but cannot be reassigned\nfinal String email = \"temid@gmail.com\"; // you can't change the value\n\nconst qty = 5; // Compile-time constant\n```\n\n### Data Types\n\n```dart\n\nint age = 20; // integers, range -2^63 to 2^63 - 1\ndouble height = 1.85; // floating-point numbers\n\n// You can also declare a variable as a num\nnum x = 1;  // x can have both int and double values\nnum += 2.5;\nprint(num); //Print: 3.5\n\nString name = \"Nicola\";\n\nbool isFavorite = true;\nbool isLoaded = false;\n```\n\n### String interpolation\n\n```dart\n// can use single or double quotes for String type\nvar firstName = 'Nicola';\nvar lastName = \"Tesla\";\n\n//can embed variables in string with $\nString fullName = \"$firstName $lastName\";\n\n// concatenate with +\nvar name = \"Albert \" + \"Einstein\";\n\nString upperCase = '${firstName.toUpperCase()}';\nprint(upperCase); //Print: NICOLA\n```\n\n### Comments\n```dart\n// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dart doc treat\n/// doc comments specially.\n\n/* Comments like these are also supported. */\n```\n\n### Imports\n\n```dart\n// Importing core libraries\nimport 'dart:math';\n\n// Importing libraries from external packages\nimport 'package:test/test.dart';\n\n// Importing files\nimport 'path/to/my_other_file.dart';\n```"
                },
                {
                    "title": "Operators",
                    "content": "### Arithmetic Operators\n\n```dart\nprint(2 + 3); //Print: 5\nprint(2 - 3); //Print: -1\nprint(2 * 3); //Print: 6\nprint(5 / 2);  //Print: 2.5 - Result is a double\nprint(5 ~/ 2); //Print: 2 - Result is an int\nprint(5 % 2); //Print: 1 - Remainder\n\nint a = 1, b;\n// Increment\nb = ++a; // preIncrement - Increment a before b gets its value.\nb = a++; // postIncrement - Increment a AFTER b gets its value.\n\n//Decrement\nb = --a; // preDecrement - Decrement a before b gets its value.\nb = a--; // postDecrement - Decrement a AFTER b gets its value.\n```\n\n### Equality and relational operators\n```dart\nprint(2 == 2);  //Print: true - Equal\nprint(2 != 3); //Print: true - Not  Equal\nprint(3 > 2); //Print: true - Grater than\nprint(2 < 3); //Print: true - Less than\nprint(3 >= 3); //Print: true - Greater than or equal to\nprint(2 <= 3); //Print: true - Less than or equal to\n```\n\n### Logical operators\n\n```dart\n// !expr inverts the expression (changes false to true, and vice versa)\n// ||\tlogical OR\n// &&\tlogical AND\nbool isOutOfStock = false;\nint quantity = 3;\nif (!isOutOfStock && (quantity == 2 || quantity == 3)) {\n  // ...Order the product...\n}\n```"
                },
                {
                    "title": "Control Flows : Conditionals",
                    "content": "### if and else if\n\n```dart\nif(age < 18){\n    print(\"Teen\");\n} else if( age > 18 && age <60){\n    print(\"Adult\");\n} else {\n    print(\"Old\");\n}\n```\n\n### switch case\n\n```dart\nenum Pet {dog, cat}\nPet myPet = Pet.dog;\nswitch(myPet){\n    case Pet.dog:\n        print('My Pet is Dog.');\n        break;\n    case Pet.cat:\n        print('My Pet is Cat.');\n        break;\n    default:\n        print('I don\\'t have a Pet');\n}\n// Prints: My Pet is Dog.\n```"
                },
                {
                    "title": "Control Flows : Loops",
                    "content": "### while loop\n\n```dart\nwhile (!dreamsAchieved) {\n  workHard();\n}\n```\nwhile loop check condition before iteration of the loop\n\n### do-while loop\n\n```dart\ndo {\n  workHard();\n} while (!dreamsAchieved);\n```\n\ndo-while loop verifies the condition after the execution of the statements inside the loop\n\n### for loop\n\n```dart\nfor(int i=0; i< 10; i++){\n    print(i);\n}\n\nvar numbers = [1,2,3];\n// for-in loop for lists\nfor(var number in numbers){\n    print(number);\n}\n```"
                },
                {
                    "title": "Collections",
                    "content": "### Lists\n\n```dart\n// ordered group of objects\nvar list = [1, 2, 3];\n\nprint(list.length); //Print: 3\nprint(list[1]); //Print: 2\n\n// other ways of list declaration and initializations\n\nList<String> cities = <String>[\"New York\", \"Mumbai\", \"Tokyo\"];\n\n// To create a list that\u2019s a compile-time constant\nconst constantCities = const [\"New York\", \"Mumbai\", \"Tokyo\"];\n```\n\n### Sets\n\n```dart\n// A set in Dart is an unordered collection of unique items.\nvar halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};\n\n// to create an empty set\nvar names = <String>{};\nSet<String> names = {}; // This works, too.\n//var names = {}; // Creates a map, not a set.\n```\n\n### Maps\n\n```dart\n// a map is an object that associates keys and values\nvar person = Map<String, String>();\n// To initialize the map, do this:\nperson['firstName'] = 'Nicola';\nperson['lastName'] = 'Tesla';\n\nprint(person); //Print: {firstName: Nicola, lastName: Tesla}\nprint(person['lastName']); //Print: Tesla\n\n\nvar nobleGases = {\n  // Key: Value\n  2: 'helium',\n  10: 'neon',\n  18: 'argon',\n};\n```"
                },
                {
                    "title": "Functions",
                    "content": "### Functions\n```dart\n// functions in dart are objects and have a type\nint add(int a, int b){\n    return a+b;\n}\n\n// functions can be assigned to variables\nint sum = add(2,3); // returns: 5\n\n// can be passed as arguments to other functions\nint totalSum = add(2, add(2,3)); // returns : 7\n```\n\n### Arrow Syntax (=>)\n\n```dart\n// functions that contain just one expression, you can use a shorthand syntax\nbool isFav(Product product) => favProductsList.contains(product);\n```\n\n### Anonymous (lambda) functions\n\n```dart\n// small one line functions that don't have name\nint add(a,b) => a+b;\n\n// lambda functions mostly passed as parameter to other functions\nconst list = ['apples', 'bananas', 'oranges'];\nlist.forEach(\n(item) => print('${list.indexOf(item)}: $item'));\n//Prints: 0: apples 1: bananas 2: oranges\n```"
                },
                {
                    "title": "Classes and Objects",
                    "content": "### Class\n\n```dart\nclass Cat {\n    String name;\n\n    // method\n    void voice(){\n        print(\"Meow\");\n    }\n}\n```\n\n### Object\n\n```dart\n// instance of a class\n// below myCat is Object of class Cat\n\nvoid main(){\n    Cat myCat = Cat();\n    myCat.name = \"Kitty\";\n    myCat.voice(); // Prints: Meow\n}\n```\n\n### Constructors\n\n```dart\nclass Cat {\n    String name;\n    Cat(this.name);\n}\n\nvoid main(){\n    Cat myCat = Cat(\"Kitty\");\n    print(myCat.name); // Prints: Kitty\n}\n```\n\n### Abstract Classes\n\n```dart\n// abstract class\u2014a class that can\u2019t be instantiated\n// This class is declared abstract and thus can't be instantiated.\nabstract class AbstractContainer {\n  // Define constructors, fields, methods...\n\n  void updateChildren(); // Abstract method.\n}\n```\n\n### Getters Setters\n\n```dart\n// provide read and write access to an object\u2019s properties\nclass Cat {\n    String name;\n    \n    // getter\n    String get catName {\n        return name;\n    }\n\n    // setter\n    void set catName(String name){\n        this.name = name;\n    }\n}\n```"
                },
                {
                    "title": "Implicit interfaces",
                    "content": "### A basic interface\n\n```dart\n// A person. The implicit interface contains greet().\nclass Person {\n  // In the interface, but visible only in this library.\n  final String _name;\n\n  // Not in the interface, since this is a constructor.\n  Person(this._name);\n\n  // In the interface.\n  String greet(String who) => 'Hello, $who. I am $_name.';\n}\n\n// An implementation of the Person interface.\nclass Impostor implements Person {\n  String get _name => '';\n\n  String greet(String who) => 'Hi $who. Do you know who I am?';\n}\n\nString greetBob(Person person) => person.greet('Bob');\n\nvoid main() {\n  print(greetBob(Person('Kathy'))); // Hello, Bob. I am Kathy.\n  print(greetBob(Impostor())); // Hi Bob. Do you know who I am?\n}\n```\n\n### Extending a class\n\n```dart\nclass Phone {\n\n    void use(){\n        _call();\n        _sendMessage();\n    }\n}\n\n// Use extends to create a subclass\nclass SmartPhone extends Phone {\n    void use(){\n        // use super to refer to the superclass\n        super.use();\n        _takePhotos();\n        _playGames();\n    }\n}\n```"
                },
                {
                    "title": "Exceptions",
                    "content": "### Throw\n\n```dart\n// throws or raises and exception\nthrow IntegerDivisionByZeroException();\n\n// You can also throw arbitrary objects\nthrow \"Product out of stock!\";\n```\n\n### Catch \n\n```dart\n\ntry {\n    int c = 3/0;\n    print(c);\n} on IntegerDivisionByZeroException {\n    // A specific exception\n    print('Can not divide integer by 0.')\n} on Exception catch (e) {\n    // Anything else that is an exception\n    print('Unknown exception: $e');\n} catch (e) {\n    // No specified type, handles all\n    print('Something really unknown: $e');\n}\n\n```\n\n### Finally\n\n```dart\n// To ensure that some code runs whether or not an exception is thrown\ntry {\n  cookFood();\n} catch (e) {\n  print('Error: $e'); // Handle the exception first.\n} finally {\n  cleanKitchen(); // Then clean up.\n}\n```"
                },
                {
                    "title": "Futures",
                    "content": "### Async Await\n\n```dart\n// functions which are asynchronous: they return after setting up a possibly time-consuming operation\n// The async and await keywords support asynchronous programming\n\nFuture<String> login() {\n String userName=\"ivansaul\";\n return\n  Future.delayed(\n    Duration(seconds: 4), () => userName);\n}\n\n// Asynchronous\nmain() async {\n print('Authenticating please wait...');\n print(await userName());\n}\n```"
                },
                {
                    "title": "Miscellaneous",
                    "content": "### Null and Null aware\n\n```dart\nint x; // The initial value of any object is null\n\n// ?? null aware operator\n\nx ??=6; // ??= assignment operator, which assigns a value of a variable only if that variable is currently null\nprint(x); //Print: 6\n\nx ??=3;\nprint(x); // Print: 6 - result is still 6\n\nprint(null ?? 10); // Prints: 10. Display the value on the left if it's not null else return the value on the right\n```\n\n### Ternary Operator\n\n```dart\n// condition ? exprIfTrue : exprIfFalse\nbool isAvailable;\n\nisAvailable ? orderProduct() : addToFavorites();\n```\n\n### Spread Operator (...)\n\n```dart\n// to insert multiple values into a collection.\nvar list = [1, 2, 3];\nvar list2 = [0, ...list];\n\nprint(list2.length); //Print: 4\n```\n\n### Cascade notation (..)\n\n```dart\n// allows you to make a sequence of operations on the same object\n\n// rather than doing this\nvar user = User();\nuser.name = \"Nicola\";\nuser.email = \"nicola@g.c\";\nuser.age = 24;\n\n// you can do this\nvar user = User()\n  ..name = \"Nicola\"\n  ..email = \"nicola@g.c\"\n  ..age = 24;\n```\n\n### Conditional Property Access\n\n```dart\nuserObject?.userName\n\n//The code snippet above is equivalent to following:\n(userObject != null) ? userObject.userName : null\n\n//You can chain multiple uses of ?. together in a single expression\nuserObject?.userName?.toString()\n\n// The preceding code returns null and never calls toString() if either userObject or userObject.userName is null\n```"
                }
            ]
        },
        {
            "title": "Kotlin",
            "tags": [
                "kotlin",
                "Android"
            ],
            "categories": [
                "Programming"
            ],
            "background": "#7954f6",
            "icon": "https://www.svgrepo.com/show/341975/kotlin.svg",
            "intro": "A quick reference cheat sheet for [Kotlin](https://kotlinlang.org/) that includes usage, examples, and more.",
            "sections": [
                {
                    "title": "Introduction to Kotlin",
                    "content": "### main() \n\nThe `main()` function is the starting point of every Kotlin program and must be included in the code before execution.\n\n```kotlin\nfun main() {\n  println(\"Greetings, CheatSheets.zip!\")\n  // Code goes here\n}\n```\n\n### Print statement\n\n```kotlin\nprintln(\"Greetings, earthling!\")\nprint(\"Take me to \")\nprint(\"your leader.\")\n\n/*\nPrint:\nGreetings, earthling!\nTake me to your leader.\n*/\n```\n\n### Notes\n\n```kotlin\n// this is a single line comment\n\n/*\nthis\nnote\nfor\nmany\n*/\n```\n\n### Execution order\n\n```kotlin\nfun main() {\n  println(\"I will be printed first.\")\n  println(\"I will be printed second.\")\n  println(\"I will be printed third.\")\n}\n```"
                },
                {
                    "title": "Data Types and Variables",
                    "content": "### Mutable variables\n\n```kotlin\nvar age = 25\nage = 26\n```\n\n### Immutable variables\n\n```kotlin\nval goldenRatio = 1.618\n```\n\n### Type inference\n\n```kotlin\n// The following variables are assigned a literal value inside double quotes\n// so the inferred type is String\n\nvar color = \"Purple\"\n```\n\n### String concatenation\n\n```kotlin\nvar streetAddress = \"123 Main St.\"\nvar cityState = \"Brooklyn, NY\"\n\nprintln(streetAddress + \" \" + cityState)\n// Print: 123 Main St. Brooklyn, NY\n```\n\n### String Templates\n\n```kotlin\nvar address = \"123 Main St.\"\nprintln(\"The address is $address\")\n// prints: The address is 123 Main St.\n```\n\n### Built-in Properties and Functions\n\n```kotlin\nvar monument = \"the Statue of Liberty\"\n\nprintln(monument. capitalize())\n// print: The Statue of Liberty\nprintln(monument. length)\n// print: 21\n```\n\n### Character escape\n\n```kotlin\nprint(\"\\\"Excellent!\\\" I cried. \\\"Elementary,\\\" said he.\")\n\n// Print: \"Excellent!\" I cried. \"Elementary,\" said he.\n```\n\n- `\\n` insert new line\n- `\\t` inserts a tab\n- `\\r` inserts carriage return\n- `\\'` inserts a single quote\n- `\\\"` inserts a double quote\n- `\\\\` inserts a backslash\n- `\\$` inserts a dollar sign\n\n### Arithmetic Operators\n\n```kotlin\n5 + 7  // 12\n9 -2   // 7\n8 *4   // 32\n25 /5  // 5\n31 % 2 // 1\n```\n\n`+` addition, `-` subtraction, `*` multiplication, `/` division, and `%` modulus\n\n### Order of operations\n\n```kotlin\n5 + 8 *2 /4 -3 // 6\n3 + (4 + 4) /2 // 7\n4 *2 + 1 *7    // 15\n3 + 18 /2 *1   // 12\n6 -3 % 2 + 2   // 7\n```\n\n### Enhanced assignment operator\n\n```kotlin\nvar batteryPercentage = 80\n\n// long syntax\nbatteryPercentage = batteryPercentage + 10\n\n// short syntax with augmented assignment operator\nbatteryPercentage += 10\n```\n\n### Increment and decrement operators\n\n```kotlin\nvar year = 2019\nyear++   // 2020\nyear--   // 2019\n```\n\n### Math library\n\n```kotlin\nMath.pow(2.0, 3.0) // 8.0\nMath.min(6, 9)     // 6\nMath.max(10, 12)   // 12\nMath. round(13.7)  // 14\n```"
                },
                {
                    "title": "Conditional Expression",
                    "content": "### If expression\n\n```kotlin\nvar morning = true\n\nif (morning) {\n  println(\"Rise and shine!\")\n}\n// Print: Rise and shine!\n```\n\n### Else-expression\n\n```kotlin\nvar rained = false\n\nif (rained) {\n  println(\"No need to water the plants today.\")\n} else {\n  println(\"The plant needs to be watered!\")\n}\n// print: The plant needs watering!\n```\n\n### Else-If expressions\n\n```kotlin\nvar age = 65\n\nif (age < 18 ) {\n  println(\"You are considered a minor\")\n} else if (age < 60) {\n  println(\"You are considered an adult\")\n} else {\n  println(\"You are considered senior\")\n}\n\n// print: you are considered senior\n```\n\n### Comparison Operators\n\n```kotlin\nvar myAge = 19\nvar sisterAge = 11\nvar cousinAge = 11\n\nmyAge > sisterAge  // true\nmyAge < cousinAge  // false\nmyAge >= cousinAge // true\nmyAge <= sisterAge // false\n```\n\n### Logical Operators\n\n```kotlin\nvar humid = true\nvar raining = true\nvar jacket = false\n\nprintln(!humid)\n// print: false\nprintln(jacket && raining)\n// print: true\nprintln(humid || raining)\n// print: true\n```\n\n### AND operator: &&\n\n```kotlin\nvar humid = true\nvar raining = true\nvar shorts = false\nvar sunny = false\n\n// true AND true\nprintln(humid && raining) // true\n// true AND false\nprintln(humid && shorts)  // false\n// false AND true\nprintln(sunny && raining) // false\n// false AND false\nprintln(shorts && sunny)  // false\n```\n\n### Or operator:||\n\n```kotlin\nvar late = true\nvar skipBreakfast = true\nvar underslept = false\nvar checkEmails = false\n\n// true OR true\nprintln(skipBreakfast || late) // true\n// true OR false\nprintln(late || checkEmails)   // true\n// false OR true\nprintln(underslept || late)    // true\n// false OR false\nprintln(checkEmails || underslept) // false\n```\n\n### NOT operator\n\n```kotlin\nvar hungry = true\nvar full = false\n\nprintln(!hungry) // false\nprintln(!full)   // true\n```\n\n### Evaluation order\n\n```kotlin\n!true && (false || true) // false\n/*\n(false || true) is evaluated first to return true.\nThen, evaluate !true && true and return the final result false\n*/\n\n!false && true || false // true\n/*\n!false is evaluated first to return true.\nThen true && true is evaluated, returning true.\nthen, true || evaluates to false and eventually returns true\n*/\n```\n\n### Nested conditions\n\n```kotlin\nvar studied = true\nvar well Rested = true\n\nif (wellRested) {\n  println(\"Good luck today!\")\n  if (studied) {\n    println(\"You should prepare for the exam!\")\n  } else {\n    println(\"Spend a few hours studying before the exam!\")\n  }\n}\n\n// Print: Good luck today!\n// print: You should be ready for the exam!\n```\n\n### When expression\n\n```kotlin\nvar grade = \"A\"\n\nwhen (grade) {\n  \"A\" -> println(\"Great job!\")\n  \"B\" -> println(\"Great job!\")\n  \"C\" -> println(\"You passed!\")\n  else -> println(\"Close! Be sure to prepare more next time!\")\n}\n// print: Great job!\n```\n\n### Range operator\n\n```kotlin \nvar height = 46 // inches\n\nif (height in 1..53) {\n  println(\"Sorry, you must be at least 54 inches to ride the coaster\")\n}\n// Prints: Sorry, you must be at least 54 inches to ride the roller coaster\n```\n\n### Equality Operators\n\n```kotlin\nvar myAge = 22\nvar sisterAge = 21\n\nmyAge == sisterAge // false\nmyAge != sisterAge // true\n```\n\n#Collections\n\n### Immutable list\n\n```kotlin\nvar programmingLanguages = listOf(\"C#\", \"Java\", \"Kotlin\", \"Ruby\")\n``` \n\n### Mutable List\n\n```kotlin\nvar fruits = mutableListOf(\"Orange\", \"Apple\", \"Banana\", \"Mango\")\n```\n\n### Access List\n\n```kotlin \nvar cars = listOf(\"BMW\", \"Ferrari\", \"Volvo\", \"Tesla\")\n\nprintln(cars[2]) // Prints: Volvo\n```\n\n### Size Attribute\n\n```kotlin \nvar worldContinents = listOf(\"Asia\", \"Africa\", \"North America\", \"South America\", \"Antarctica\", \"Europe\", \"Australia\")\n\nprintln(worldContinents.size) // Prints: 7\n``` \n\n### List Manipulation\n\n```kotlin  \nvar seas = listOf(\"Black Sea\", \"Caribbean Sea\", \"North Sea\")\nprintln(seas. contains(\"North Sea\")) // Prints: true\n\n// The contains() function performs a read operation on any list and determines if the element exists\nseas.add(\"Baltic Sea\") // Error: cannot write to immutable list\n// The add() function can only be called on mutable lists, so the code above throws an error\n```\n\n### Immutable Sets\n\n```kotlin \nvar primaryColors = setOf(\"Red\", \"Blue\", \"Yellow\")\n```\n\n### Mutable Sets\n\n```kotlin \nvar womenInTech = mutableSetOf(\"Ada Lovelace\", \"Grace Hopper\", \"Radia Perlman\", \"Sister Mary Kenneth Keller\")\n```\n\n### Access Collection Elements\n\n```kotlin \nvar companies = setOf(\"Facebook\", \"Apple\", \"Netflix\", \"Google\")\n\nprintln(companies.elementAt(3))\n// Prints: Google\nprintln(companies.elementAt(4))\n// Returns and Error\nprintln(companies.elementAtOrNull(4))\n// Prints: null\n```\n\n### Immutable Map\n\n```kotlin \nvar averageTemp = mapOf(\"winter\" to 35,  \"spring\" to 60,  \"summer\" to 85, \"fall\" to 55)\n```\n\n### Mutable Mapping\n\n```kotlin  \nvar europeanDomains = mutableMapOf(\"Germany\" to \"de\", \"Slovakia\" to \"sk\", \"Hungary\" to \"hu\", \"Norway\" to \"no\")\n```\n\n### Retrieve map keys and values\n\n```kotlin  \nvar oscarWinners = mutableMapOf(\"Parasite\" to \"Bong Joon-ho\", \"Green Book\" to \"Jim Burke\", \"The Shape Of Water\" to \"Guillermo del Toro\")\n\nprintln(oscarWinners.keys)\n// Prints: [Parasite, Green Book, The Shape Of Water]\n\nprintln(oscarWinners.values)\n// Prints: [Bong Joon-ho, Jim Burke, Guillermo del Toro]\nprintln(oscarWinners[\"Parasite\"])\n// Prints: Bong Joon-ho\n```\n\n### Add and remove map entries\n\n```kotlin\nvar worldCapitals = mutableMapOf(\"United States\" to \"Washington D.C.\", \"Germany\" to \"Berlin\", \"Mexico\" to \"Mexico City\", \"France\" to \"Paris\")\n\nworldCapitals.put(\"Brazil\", \"Brasilia\")\nprintln(worldCapitals)\n// Prints: {United States=Washington D.C., Germany=Berlin, Mexico=Mexico City, France=Paris, Brazil=Brasilia}\n\nworldCapitals.remove(\"Germany\")\nprintln(worldCapitals)\n// Prints: {United States=Washington D.C., Mexico=Mexico City, France=Paris, Brazil=Brasilia}\n```"
                },
                {
                    "title": "Function",
                    "content": "### Function\n\n```kotlin\nfun greet() {\n  println(\"Hey there!\")\n}\n\nfun main() {\n  //Function call\n  greet() //Prints: Hey there!\n}\n```\n\n### Function Parameters\n\n```kotlin  \nfun birthday(name: String, age: Int) {\n   println(\"Happy birthday $name! You turn $age today!\")\n}\n\nfun main() {\n  birthday(\"Oscar\", 26) \n  //Prints: Happy birthday Oscar! You turn 25 today!\n  birthday(\"Amarah\", 30) \n  //Prints: Happy birthday Amarah! You turn 30 today!\n}\n```\n\n### Default Parameters\n\n```kotlin \nfun favoriteLanguage(name, language = \"Kotlin\") {\n  println(\"Hello, $name. Your favorite programming language is $language\")  \n}\n\nfun main() {\n  favoriteLanguage(\"Manon\") \n  //Prints: Hello, Manon. Your favorite programming language is Kotlin\n  \n  favoriteLanguage(\"Lee\", \"Java\") \n  //Prints: Hello, Lee. Your favorite programming language is Java\n}\n```\n\n### Named Parameters\n\n```kotlin  \nfun findMyAge(currentYear: Int, birthYear: Int) {\n   var myAge = currentYear -birthYear\nprintln(\"I am $myAge years old.\")\n}\n\nfun main() {\n  findMyAge(currentYear = 2020, birthYear = 1995)\n  //Prints: I am 25 years old.\n  findMyAge(birthYear = 1920, currentYear = 2020)\n  //Prints: I am 100 years old.\n}\n```\n\n### Return Statement\n\n```kotlin  \n//Return type is declared outside the parentheses\nfun getArea(length: Int, width: Int): Int {\n  var area = length *width\n\n  //return statement\n  return area\n}\n\nfun main() {\n  var myArea = getArea(10, 8)\nprintln(\"The area is $myArea.\")\n//Prints: The area is 80.\n}\n```\n\n### Single expression function\n\n```kotlin\nfun fullName(firstName: String, lastName: String) = \"$firstName $lastName\"\n\nfun main() {\n  println(fullName(\"Ariana\", \"Ortega\"))\n  //Prints: Ariana Ortega\n  println(fullName(\"Kai\", \"Gittens\"))\n  //Prints: Kai Gittens\n}\n```\n\n### Function Literals\n\n```kotlin\nfun main() {\n  //Anonymous Function:\n  var getProduct = fun(num1: Int, num2: Int): Int {\nreturn num1 *num2\n  }\n  println(getProduct(8, 3))\n  //Prints: 24\n//Lambda Expression\n  var getDifference = { num1: Int, num2: Int -> num1 -num2 }\n  println(getDifference(10, 3))\n  //Prints: 7\n}\n```"
                },
                {
                    "title": "Class",
                    "content": "### Class Example\n\n```kotlin\n//class with properties containing default values\nclass Student {\n  var name = \"Lucia\"\n  var semester = \"Fall\"\n  var gpa = 3.95\n}\n\n//shorthand syntax without class body\nclass Student\n```\n\n### Class Instance\n\n```kotlin\n// Class\nclass Student {\n  var name = \"Lucia\"\n  var semester = \"Fall\"\nvar gpa = 3.95\n}\n\nfun main() {\n  var student = Student()   \n  // Instance\n  println(student.name)     \n  // Prints: Lucia\n  println(student.semester) \n  // Prints: Fall\n  println(student.gpa)      \n  // Prints: 3.95  \n} \n```\n\n### Primary Constructor\n\n```kotlin  \nclass Student(val name: String, val gpa: Double, val semester: String, val estimatedGraduationYear: Int) \n\nfun main() {\n  var student = Student(\"Lucia\", 3.95, \"Fall\", 2022) \n  println(student.name)     \n  //Prints: Lucia\n  println(student.gpa)\n  //Prints: 3.95\n  println(student.semester) \n  //Prints: Fall\n  println(student.estimatedGraduationYear) \n  //Prints: 2022\n}\n```\n\n### Initialization Block\n\n```kotlin \nclass Student(val name: String, val gpa: Double, val semester: String, val estimatedGraduationYear: Int) {\n  init {\n    println(\"$name has ${estimatedGraduationYear -2020} years left in college.\")\n  }\n}\n\nfun main() {\n  var student = Student(\"Lucia\", 3.95, \"Fall\", 2022)\n//Prints: Lucia has 2 years left in college. \n}\n```\n\n### Member Function\n\n```kotlin  \nclass Student(val name: String, val gpa: Double, val semester: String, val estimatedGraduationYear: Int) {\n\n  init {\nprintln(\"$name has ${estimatedGraduationYear -2020} years left in college.\")\n  }\n\n  //member function\n  fun calculateLetterGrade(): String {\n    return when {\n      gpa >= 3.0 -> \"A\"\n      gpa >= 2.7 -> \"B\"\n      gpa >= 1.7 -> \"C\"\ngpa >= 1.0 -> \"D\"\n      else -> \"E\"\n    }\n  }\n}\n\n//When the instance is created and the function is called, the when expression will be executed and return the letter grade\nfun main() {\n  var student = Student(\"Lucia\", 3.95, \"Fall\", 2022)\n//Prints: Lucia has 2 years left in college.\n  println(\"${student.name}'s letter grade is ${student.calculateLetterGrade()}.\")\n  //Prints: Lucia's letter grade is A.\n}\n```"
                }
            ]
        },
        {
            "title": "Bash",
            "tags": [
                "shell",
                "sh",
                "echo",
                "script",
                "linux"
            ],
            "categories": [
                "Programming",
                "Operating System"
            ],
            "background": "#3e4548",
            "icon": "https://www.svgrepo.com/show/361365/terminal-bash.svg",
            "intro": "This is a quick reference cheat sheet to getting started with linux bash shell scripting.",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "- [Devhints](https://devhints.io/bash) _(devhints.io)_\n- [Bash-hackers wiki](http://wiki.bash-hackers.org/) _(bash-hackers.org)_\n- [Shell vars](http://wiki.bash-hackers.org/syntax/shellvars) _(bash-hackers.org)_\n- [Learn bash in y minutes](https://learnxinyminutes.com/docs/bash/) _(learnxinyminutes.com)_\n- [Bash Guide](http://mywiki.wooledge.org/BashGuide) _(mywiki.wooledge.org)_\n- [ShellCheck](https://www.shellcheck.net/) _(shellcheck.net)_\n- [shell - Standard Shell](https://devmanual.gentoo.org/tools-reference/bash/index.html) _(devmanual.gentoo.org)_\n\n### hello.sh\n\n```bash\n#!/bin/bash\n\nVAR=\"world\"\necho \"Hello $VAR!\" # => Hello world!\n```\nExecute the script\n```shell script\n$ bash hello.sh\n```\n\n\n### Variables\n\n```bash\nNAME=\"John\"\n\necho ${NAME}    # => John (Variables)\necho $NAME      # => John (Variables)\necho \"$NAME\"    # => John (Variables)\necho '$NAME'    # => $NAME (Exact string)\necho \"${NAME}!\" # => John! (Variables)\n\nNAME = \"John\"   # => Error (about space)\n```\n\n\n\n### Comments\n\n```bash\n# This is an inline Bash comment.\n```\n\n```bash\n: '\nThis is a\nvery neat comment\nin bash\n'\n```\nMulti-line comments use `:'` to open and `'` to close\n\n\n\n\n### Arguments\n\n| Expression  | Description                           |\n|-------------|---------------------------------------|\n| `$1` \u2026 `$9` | Parameter 1 ... 9                     |\n| `$0`        | Name of the script itself             |\n| `$1`        | First argument                        |\n| `${10}`     | Positional parameter 10               |\n| `$#`        | Number of arguments                   |\n| `$$`        | Process id of the shell               |\n| `$*`        | All arguments                         |\n| `$@`        | All arguments, starting from first    |\n| `$-`        | Current options                       |\n| `$_`        | Last argument of the previous command |\n\nSee: [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables)\n\n\n### Functions\n\n```bash\nget_name() {\n    echo \"John\"\n}\n\necho \"You are $(get_name)\"\n```\n\n\n### Conditionals {#conditionals-example}\n\n```bash\nif [[ -z \"$string\" ]]; then\n    echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n    echo \"String is not empty\"\nfi\n```\n\n\n### Brace expansion\n\n```bash\necho {A,B}.js\n```\n---\n\n| Expression | Description         |\n|------------|---------------------|\n| `{A,B}`    | Same as `A B`       |\n| `{A,B}.js` | Same as `A.js B.js` |\n| `{1..5}`   | Same as `1 2 3 4 5` |\n\nSee: [Brace expansion](http://wiki.bash-hackers.org/syntax/expansion/brace)\n\n### Shell execution\n\n```bash\n# => I'm in /path/of/current\necho \"I'm in $(PWD)\"\n\n# Same as:\necho \"I'm in `pwd`\"\n```\n\nSee: [Command substitution](http://wiki.bash-hackers.org/syntax/expansion/cmdsubst)"
                },
                {
                    "title": "Parameter expansions",
                    "content": "### Syntax\n\n| Code              | Description         |\n|-------------------|---------------------|\n| `${FOO%suffix}`   | Remove suffix       |\n| `${FOO#prefix}`   | Remove prefix       |\n| `${FOO%%suffix}`  | Remove long suffix  |\n| `${FOO##prefix}`  | Remove long prefix  |\n| `${FOO/from/to}`  | Replace first match |\n| `${FOO//from/to}` | Replace all         |\n| `${FOO/%from/to}` | Replace suffix      |\n| `${FOO/#from/to}` | Replace prefix      |\n\n\n#### Substrings\n\n| Expression      | Description                    |\n|-----------------|--------------------------------|\n| `${FOO:0:3}`    | Substring _(position, length)_ |\n| `${FOO:(-3):3}` | Substring from the right       |\n\n#### Length\n\n| Expression | Description      |\n|------------|------------------|\n| `${#FOO}`  | Length of `$FOO` |\n\n#### Default values\n\n| Expression        | Description                              |\n|-------------------|------------------------------------------|\n| `${FOO:-val}`     | `$FOO`, or `val` if unset                |\n| `${FOO:=val}`     | Set `$FOO` to `val` if unset             |\n| `${FOO:+val}`     | `val` if `$FOO` is set                   |\n| `${FOO:?message}` | Show message and exit if `$FOO` is unset |\n\n\n\n### Substitution\n\n```bash\necho ${food:-Cake}  #=> $food or \"Cake\"\n```\n\n\n```bash\nSTR=\"/path/to/foo.cpp\"\necho ${STR%.cpp}    # /path/to/foo\necho ${STR%.cpp}.o  # /path/to/foo.o\necho ${STR%/*}      # /path/to\n\necho ${STR##*.}     # cpp (extension)\necho ${STR##*/}     # foo.cpp (basepath)\n\necho ${STR#*/}      # path/to/foo.cpp\necho ${STR##*/}     # foo.cpp\n\necho ${STR/foo/bar} # /path/to/bar.cpp\n```\n\n\n### Slicing\n\n```bash\nname=\"John\"\necho ${name}           # => John\necho ${name:0:2}       # => Jo\necho ${name::2}        # => Jo\necho ${name::-1}       # => Joh\necho ${name:(-1)}      # => n\necho ${name:(-2)}      # => hn\necho ${name:(-2):2}    # => hn\n\nlength=2\necho ${name:0:length}  # => Jo\n```\nSee: [Parameter expansion](http://wiki.bash-hackers.org/syntax/pe)\n\n\n\n### basepath & dirpath\n```bash\nSRC=\"/path/to/foo.cpp\"\n```\n\n```bash\nBASEPATH=${SRC##*/}   \necho $BASEPATH  # => \"foo.cpp\"\n\n\nDIRPATH=${SRC%$BASEPATH}\necho $DIRPATH   # => \"/path/to/\"\n```\n\n\n\n\n\n\n### Transform \n\n```bash\nSTR=\"HELLO WORLD!\"\necho ${STR,}   # => hELLO WORLD!\necho ${STR,,}  # => hello world!\n\nSTR=\"hello world!\"\necho ${STR^}   # => Hello world!\necho ${STR^^}  # => HELLO WORLD!\n\nARR=(hello World)\necho \"${ARR[@],}\" # => hello world\necho \"${ARR[@]^}\" # => Hello World\n```\n\n\n\n\nBash Arrays \n------\n\n### Defining arrays\n\n```bash\nFruits=('Apple' 'Banana' 'Orange')\n\nFruits[0]=\"Apple\"\nFruits[1]=\"Banana\"\nFruits[2]=\"Orange\"\n\nARRAY1=(foo{1..2}) # => foo1 foo2\nARRAY2=({A..D})    # => A B C D\n\n# Merge => foo1 foo2 A B C D\nARRAY3=(${ARRAY1[@]} ${ARRAY2[@]})\n\n# declare construct\ndeclare -a Numbers=(1 2 3)\nNumbers+=(4 5) # Append => 1 2 3 4 5\n```\n\n\n\n### Indexing\n\n| -                  | -             |\n|--------------------|---------------|\n| `${Fruits[0]}`     | First element |\n| `${Fruits[-1]}`    | Last element  |\n| `${Fruits[*]}`     | All elements  |\n| `${Fruits[@]}`     | All elements  |\n| `${#Fruits[@]}`    | Number of all |\n| `${#Fruits}`       | Length of 1st |\n| `${#Fruits[3]}`    | Length of nth |\n| `${Fruits[@]:3:2}` | Range         |\n| `${!Fruits[@]}`    | Keys of all   |\n\n\n\n### Iteration\n\n```bash\nFruits=('Apple' 'Banana' 'Orange')\n\nfor e in \"${Fruits[@]}\"; do\n    echo $e\ndone\n```\n#### With index\n```bash\nfor i in \"${!Fruits[@]}\"; do\n  printf \"%s\\t%s\\n\" \"$i\" \"${Fruits[$i]}\"\ndone\n\n```\n\n\n### Operations \n\n```bash\nFruits=(\"${Fruits[@]}\" \"Watermelon\")     # Push\nFruits+=('Watermelon')                   # Also Push\nFruits=( ${Fruits[@]/Ap*/} )             # Remove by regex match\nunset Fruits[2]                          # Remove one item\nFruits=(\"${Fruits[@]}\")                  # Duplicate\nFruits=(\"${Fruits[@]}\" \"${Veggies[@]}\")  # Concatenate\nlines=(`cat \"logfile\"`)                  # Read from file\n```\n\n### Arrays as arguments\n```bash\nfunction extract()\n{\n    local -n myarray=$1\n    local idx=$2\n    echo \"${myarray[$idx]}\"\n}\nFruits=('Apple' 'Banana' 'Orange')\nextract Fruits 2     # => Orangle\n```"
                },
                {
                    "title": "Dictionaries",
                    "content": "### Defining\n\n```bash\ndeclare -A sounds\n```\n\n```bash\nsounds[dog]=\"bark\"\nsounds[cow]=\"moo\"\nsounds[bird]=\"tweet\"\nsounds[wolf]=\"howl\"\n```\n\n\n### Working with dictionaries\n\n```bash\necho ${sounds[dog]} # Dog's sound\necho ${sounds[@]}   # All values\necho ${!sounds[@]}  # All keys\necho ${#sounds[@]}  # Number of elements\nunset sounds[dog]   # Delete dog\n```\n\n### Iteration\n\n```bash\nfor val in \"${sounds[@]}\"; do\n    echo $val\ndone\n```\n---\n```bash\nfor key in \"${!sounds[@]}\"; do\n    echo $key\ndone\n```"
                },
                {
                    "title": "Conditionals",
                    "content": "### Integer conditions\n\n| Condition           | Description                                 |\n|---------------------|---------------------------------------------|\n| `[[ NUM -eq NUM ]]` | <yel>Eq</yel>ual                            |\n| `[[ NUM -ne NUM ]]` | <yel>N</yel>ot <yel>e</yel>qual             |\n| `[[ NUM -lt NUM ]]` | <yel>L</yel>ess <yel>t</yel>han             |\n| `[[ NUM -le NUM ]]` | <yel>L</yel>ess than or <yel>e</yel>qual    |\n| `[[ NUM -gt NUM ]]` | <yel>G</yel>reater <yel>t</yel>han          |\n| `[[ NUM -ge NUM ]]` | <yel>G</yel>reater than or <yel>e</yel>qual |\n| `(( NUM < NUM ))`   | Less than                                   |\n| `(( NUM <= NUM ))`  | Less than or equal                          |\n| `(( NUM > NUM ))`   | Greater than                                |\n| `(( NUM >= NUM ))`  | Greater than or equal                       |\n\n\n### String conditions\n\n| Condition          | Description                 |\n|--------------------|-----------------------------|\n| `[[ -z STR ]]`     | Empty string                |\n| `[[ -n STR ]]`     | <yel>N</yel>ot empty string |\n| `[[ STR == STR ]]` | Equal                       |\n| `[[ STR = STR ]]`  | Equal (Same above)          |\n| `[[ STR < STR ]]`  | Less than _(ASCII)_         |\n| `[[ STR > STR ]]`  | Greater than _(ASCII)_      |\n| `[[ STR != STR ]]` | Not Equal                   |\n| `[[ STR =~ STR ]]` | Regexp                      |\n\n\n\n\n\n\n### Example \n\n#### String\n```bash\nif [[ -z \"$string\" ]]; then\n    echo \"String is empty\"\nelif [[ -n \"$string\" ]]; then\n    echo \"String is not empty\"\nelse\n    echo \"This never happens\"\nfi\n```\n\n#### Combinations\n```bash\nif [[ X && Y ]]; then\n    ...\nfi\n```\n\n#### Equal\n```bash\nif [[ \"$A\" == \"$B\" ]]; then\n    ...\nfi\n```\n\n#### Regex\n```bash\nif [[ '1. abc' =~ ([a-z]+) ]]; then\n    echo ${BASH_REMATCH[1]}\nfi\n```\n\n#### Smaller\n```bash\nif (( $a < $b )); then\n   echo \"$a is smaller than $b\"\nfi\n```\n\n#### Exists\n```bash\nif [[ -e \"file.txt\" ]]; then\n    echo \"file exists\"\nfi\n```\n\n\n\n\n\n### File conditions \n\n| Condition         | Description                            |\n|-------------------|----------------------------------------|\n| `[[ -e FILE ]]`   | <yel>E</yel>xists                      |\n| `[[ -d FILE ]]`   | <yel>D</yel>irectory                   |\n| `[[ -f FILE ]]`   | <yel>F</yel>ile                        |\n| `[[ -h FILE ]]`   | Symlink                                |\n| `[[ -s FILE ]]`   | Size is > 0 bytes                      |\n| `[[ -r FILE ]]`   | <yel>R</yel>eadable                    |\n| `[[ -w FILE ]]`   | <yel>W</yel>ritable                    |\n| `[[ -x FILE ]]`   | Executable                             |\n| `[[ f1 -nt f2 ]]` | f1 <yel>n</yel>ewer <yel>t</yel>han f2 |\n| `[[ f1 -ot f2 ]]` | f2 <yel>o</yel>lder <yel>t</yel>han f1 |\n| `[[ f1 -ef f2 ]]` | Same files                             |\n\n\n### More conditions\n\n| Condition            | Description          |\n|----------------------|----------------------|\n| `[[ -o noclobber ]]` | If OPTION is enabled |\n| `[[ ! EXPR ]]`       | Not                  |\n| `[[ X && Y ]]`       | And                  |\n| `[[ X || Y ]]`       | Or                   |\n\n\n### logical and, or\n```bash\nif [ \"$1\" = 'y' -a $2 -gt 0 ]; then\n    echo \"yes\"\nfi\n\nif [ \"$1\" = 'n' -o $2 -lt 0 ]; then\n    echo \"no\"\nfi\n```\n\n\n\nBash Loops\n-----\n\n### Basic for loop\n\n```bash\nfor i in /etc/rc.*; do\n    echo $i\ndone\n```\n\n### C-like for loop\n\n```bash\nfor ((i = 0 ; i < 100 ; i++)); do\n    echo $i\ndone\n```\n\n### Ranges\n\n```bash\nfor i in {1..5}; do\n    echo \"Welcome $i\"\ndone\n```\n\n\n#### With step size\n\n```bash\nfor i in {5..50..5}; do\n    echo \"Welcome $i\"\ndone\n```\n\n\n\n### Auto increment\n\n```bash\ni=1\nwhile [[ $i -lt 4 ]]; do\n    echo \"Number: $i\"\n    ((i++))\ndone\n```\n\n### Auto decrement\n\n```bash\ni=3\nwhile [[ $i -gt 0 ]]; do\n    echo \"Number: $i\"\n    ((i--))\ndone\n```\n\n\n### Continue\n\n```bash {data=3,5}\nfor number in $(seq 1 3); do\n    if [[ $number == 2 ]]; then\n        continue;\n    fi\n    echo \"$number\"\ndone\n```\n\n\n### Break\n\n```bash\nfor number in $(seq 1 3); do\n    if [[ $number == 2 ]]; then\n        # Skip entire rest of loop.\n        break;\n    fi\n    # This will only print 1\n    echo \"$number\"\ndone\n```\n\n### Until\n```bash\ncount=0\nuntil [ $count -gt 10 ]; do\n    echo \"$count\"\n    ((count++))\ndone\n```\n\n\n### Forever \n\n```bash\nwhile true; do\n    # here is some code.\ndone\n```\n\n### Forever (shorthand)\n```bash\nwhile :; do\n    # here is some code.\ndone\n```\n\n\n### Reading lines\n\n```bash\ncat file.txt | while read line; do\n    echo $line\ndone\n```"
                },
                {
                    "title": "Functions",
                    "content": "### Defining functions\n\n```bash\nmyfunc() {\n    echo \"hello $1\"\n}\n```\n\n```bash\n# Same as above (alternate syntax)\nfunction myfunc() {\n    echo \"hello $1\"\n}\n```\n\n```bash\nmyfunc \"John\"\n```\n\n### Returning values\n\n```bash\nmyfunc() {\n    local myresult='some value'\n    echo $myresult\n}\n```\n\n```bash\nresult=\"$(myfunc)\"\n```\n\n### Raising errors\n\n```bash\nmyfunc() {\n    return 1\n}\n```\n\n```bash\nif myfunc; then\n    echo \"success\"\nelse\n    echo \"failure\"\nfi\n```"
                },
                {
                    "title": "Bash Options",
                    "content": "### Options\n\n```bash\n# Avoid overlay files\n# (echo \"hi\" > foo)\nset -o noclobber\n\n# Used to exit upon error\n# avoiding cascading errors\nset -o errexit   \n\n# Unveils hidden failures\nset -o pipefail  \n\n# Exposes unset variables\nset -o nounset\n```\n\n### Glob options\n\n```bash\n# Non-matching globs are removed  \n# ('*.foo' => '')\nshopt -s nullglob   \n\n# Non-matching globs throw errors\nshopt -s failglob  \n\n# Case insensitive globs\nshopt -s nocaseglob \n\n# Wildcards match dotfiles \n# (\"*.sh\" => \".foo.sh\")\nshopt -s dotglob    \n\n# Allow ** for recursive matches \n# ('lib/**/*.rb' => 'lib/a/b/c.rb')\nshopt -s globstar   \n```"
                },
                {
                    "title": "Bash History",
                    "content": "### Commands\n\n| Command               | Description                               |\n|-----------------------|-------------------------------------------|\n| `history`             | Show history                              |\n| `sudo !!`             | Run the previous command with sudo        |\n| `shopt -s histverify` | Don't execute expanded result immediately |\n\n### Expansions\n\n| Expression   | Description                                          |\n|--------------|------------------------------------------------------|\n| `!$`         | Expand last parameter of most recent command         |\n| `!*`         | Expand all parameters of most recent command         |\n| `!-n`        | Expand `n`th most recent command                     |\n| `!n`         | Expand `n`th command in history                      |\n| `!<command>` | Expand most recent invocation of command `<command>` |\n\n### Operations\n\n| Code                 | Description                                                           |\n|----------------------|-----------------------------------------------------------------------|\n| `!!`                 | Execute last command again                                            |\n| `!!:s/<FROM>/<TO>/`  | Replace first occurrence of `<FROM>` to `<TO>` in most recent command |\n| `!!:gs/<FROM>/<TO>/` | Replace all occurrences of `<FROM>` to `<TO>` in most recent command  |\n| `!$:t`               | Expand only basename from last parameter of most recent command       |\n| `!$:h`               | Expand only directory from last parameter of most recent command      |\n\n`!!` and `!$` can be replaced with any valid expansion.\n\n### Slices\n\n| Code     | Description                                                                              |\n|----------|------------------------------------------------------------------------------------------|\n| `!!:n`   | Expand only `n`th token from most recent command (command is `0`; first argument is `1`) |\n| `!^`     | Expand first argument from most recent command                                           |\n| `!$`     | Expand last token from most recent command                                               |\n| `!!:n-m` | Expand range of tokens from most recent command                                          |\n| `!!:n-$` | Expand `n`th token to last from most recent command                                      |\n\n`!!` can be replaced with any valid expansion i.e. `!cat`, `!-2`, `!42`, etc."
                },
                {
                    "title": "Miscellaneous ",
                    "content": "### Numeric calculations\n\n```bash\n$((a + 200))      # Add 200 to $a\n```\n\n```bash\n$(($RANDOM%200))  # Random number 0..199\n```\n\n### Subshells\n\n```bash\n(cd somedir; echo \"I'm now in $PWD\")\npwd # still in first directory\n```\n\n\n### Inspecting commands\n\n```bash\ncommand -V cd\n#=> \"cd is a function/alias/whatever\"\n```\n\n\n### Redirection\n\n```bash\npython hello.py > output.txt   # stdout to (file)\npython hello.py >> output.txt  # stdout to (file), append\npython hello.py 2> error.log   # stderr to (file)\npython hello.py 2>&1           # stderr to stdout\npython hello.py 2>/dev/null    # stderr to (null)\npython hello.py &>/dev/null    # stdout and stderr to (null)\n```\n\n```bash\npython hello.py < foo.txt      # feed foo.txt to stdin for python\n```\n\n\n### Source relative\n\n```bash\nsource \"${0%/*}/../share/foo.sh\"\n```\n\n### Directory of script\n\n```bash\nDIR=\"${0%/*}\"\n```\n\n### Case/switch\n\n```bash\ncase \"$1\" in\n    start | up)\n    vagrant up\n    ;;\n\n    *)\n    echo \"Usage: $0 {start|stop|ssh}\"\n    ;;\nesac\n```\n\n\n### Trap errors \n\n```bash\ntrap 'echo Error at about $LINENO' ERR\n```\n\nor\n\n```bash\ntraperr() {\n    echo \"ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}\"\n}\n\nset -o errtrace\ntrap traperr ERR\n```\n\n\n### printf\n\n```bash\nprintf \"Hello %s, I'm %s\" Sven Olga\n#=> \"Hello Sven, I'm Olga\n\nprintf \"1 + 1 = %d\" 2\n#=> \"1 + 1 = 2\"\n\nprintf \"Print a float: %f\" 2\n#=> \"Print a float: 2.000000\"\n```\n\n### Getting options \n\n```bash\nwhile [[ \"$1\" =~ ^- && ! \"$1\" == \"--\" ]]; do case $1 in\n    -V | --version )\n    echo $version\n    exit\n    ;;\n    -s | --string )\n    shift; string=$1\n    ;;\n    -f | --flag )\n    flag=1\n    ;;\nesac; shift; done\nif [[ \"$1\" == '--' ]]; then shift; fi\n```\n\n### Check for command's result \n\n```bash\nif ping -c 1 google.com; then\n    echo \"It appears you have a working internet connection\"\nfi\n```\n\n\n### Special variables\n\n| Expression | Description                  |\n|------------|------------------------------|\n| `$?`       | Exit status of last task     |\n| `$!`       | PID of last background task  |\n| `$$`       | PID of shell                 |\n| `$0`       | Filename of the shell script |\n\nSee [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables).\n\n\n### Grep check\n\n```bash\nif grep -q 'foo' ~/.bash_history; then\n    echo \"You appear to have typed 'foo' in the past\"\nfi\n```\n\n\n### Backslash escapes \n\n- &nbsp; \n- \\!\n- \\\"\n- \\#\n- \\&\n- \\'\n- \\(\n- \\)\n- \\,\n- \\;\n- \\<\n- \\>\n- \\[\n- \\|\n- \\\\\n- \\]\n- \\^\n- \\{\n- \\}\n- \\`\n- \\$\n- \\*\n- \\?\n\n\n\nEscape these special characters with `\\`\n\n\n\n\n### Heredoc\n\n```sh\ncat <<END\nhello world\nEND\n```\n\n\n### Go to previous directory\n\n```bash\npwd # /home/user/foo\ncd bar/\npwd # /home/user/foo/bar\ncd -\npwd # /home/user/foo\n```\n\n\n### Reading input\n\n```bash\necho -n \"Proceed? [y/n]: \"\nread ans\necho $ans\n```\n\n```bash\nread -n 1 ans    # Just one character\n```\n\n\n### Conditional execution\n\n```bash\ngit commit && git push\ngit commit || echo \"Commit failed\"\n```\n\n\n### Strict mode\n\n```bash\nset -euo pipefail\nIFS=$'\\n\\t'\n```\n\nSee: [Unofficial bash strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)\n\n\n### Optional arguments\n\n```bash\nargs=(\"$@\")\nargs+=(foo)\nargs+=(bar)\necho \"${args[@]}\"\n```\n\nPut the arguments into an array and then append"
                }
            ]
        },
        {
            "title": "Python",
            "tags": [
                "python",
                "script",
                "interpret"
            ],
            "categories": [
                "Programming"
            ],
            "background": "#436b97",
            "icon": "https://www.svgrepo.com/show/512738/python-127.svg",
            "intro": "\"The [Python](https://www.python.org/) cheat sheet is a one-page reference sheet for the Python 3 programming language.\"\n",
            "sections": [
                {
                    "title": "Getting Started",
                    "content": "### Introduction\n\n- [Python](https://www.python.org/)  _(python.org)_\n- [Python Document](https://docs.python.org/3/index.html)  _(docs.python.org)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/python/) _(learnxinyminutes.com)_\n\n\n### Hello World\n\nThe famous \"Hello World\" program in Python\n\n```python\n>>> print(\"Hello, World!\")\nHello, World!\n```\n\n### Variables\n\nPython can't declare a variable without assignment.\n\n```python\nage = 18      # age is of type int\nname = \"John\" # name is now of type str\nprint(name)\n```\n\n### Data Types\n\n|                                    |          |\n|------------------------------------|----------|\n| `str`                              | Text     |\n| `int`, `float`, `complex`          | Numeric  |\n| `list`, `tuple`, `range`           | Sequence |\n| `dict`                             | Mapping  |\n| `set`, `frozenset`                 | Set      |\n| `bool`                             | Boolean  |\n| `bytes`, `bytearray`, `memoryview` | Binary   |\n\n\n### Slicing String\n\n```python\n>>> msg = \"Hello, World!\"\n>>> print(msg[2:5])\nllo\n```\n\n### Lists\n\n```python\nmylist = []\nmylist.append(1)\nmylist.append(2)\nfor item in mylist:\n    print(item) # prints out 1,2\n```\n\n### If Else\n\n```python\nnum = 200\nif num > 0:\n    print(\"num is greater than 0\")\nelse:\n    print(\"num is not greater than 0\")\n```\n\n### Loops\n\n```python\nfor item in range(6):\n    if item == 3: break\n    print(item)\nelse:\n    print(\"Finally finished!\")\n```\n\n\n### Functions\n\n```python\n>>> def my_function():\n...     print(\"Hello from a function\")\n...\n>>> my_function()\nHello from a function\n```\n\n\n### File Handling\n\n```python\nwith open(\"myfile.txt\", \"r\", encoding='utf8') as file:\n    for line in file:\n        print(line)\n```\n\n\n### Arithmetic\n\n```python\nresult = 10 + 30 # => 40\nresult = 40 - 10 # => 30\nresult = 50 * 5  # => 250\nresult = 16 / 4  # => 4.0 (Float Division)\nresult = 16 // 4 # => 4 (Integer Division)\nresult = 25 % 2  # => 1\nresult = 5 ** 3  # => 125\n```\n\nThe `/` means quotient of x and y, and the `//` means floored quotient of x and y, also see [StackOverflow](https://stackoverflow.com/a/183870/13192320)\n\n### Plus-Equals\n\n```python\ncounter = 0\ncounter += 10           # => 10\ncounter = 0\ncounter = counter + 10  # => 10\n\nmessage = \"Part 1.\"\n\n# => Part 1.Part 2.\nmessage += \"Part 2.\"   \n```\n\n### f-Strings (Python 3.6+)\n\n```python\n>>> website = 'Quickref.ME'\n>>> f\"Hello, {website}\"\n\"Hello, Quickref.ME\"\n\n>>> num = 10\n>>> f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n```"
                },
                {
                    "title": "Python Built-in Data Types",
                    "content": "### Strings\n\n```python\nhello = \"Hello World\"\nhello = 'Hello World'\n\nmulti_string = \"\"\"Multiline Strings\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit \"\"\"\n```\n\n### Numbers\n\n```python\nx = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\n>>> print(type(x))\n<class 'int'>\n```\n\n### Booleans\n\n```python\nmy_bool = True \nmy_bool = False\n\nbool(0)     # => False\nbool(1)     # => True\n```\n\n### Lists\n\n```python\nlist1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [True, False, False]\nlist3 = [1, 5, 7, 9, 3]\nlist4 = list((1, 5, 7, 9, 3))\n```\n\n### Tuple\n\nSimilar to List but immutable \n\n```python\nmy_tuple = (1, 2, 3)\nmy_tuple = tuple((1, 2, 3))\n```\n\n### Set\n\nSet of unique items/objects\n\n```python\nset1 = {\"a\", \"b\", \"c\"}   \nset2 = set((\"a\", \"b\", \"c\"))\n```\n\n### Dictionary\n\nKey: Value pair, JSON like object\n\n```python\n>>> empty_dict = {}\n>>> a = {\"one\": 1, \"two\": 2, \"three\": 3}\n>>> a[\"one\"]\n1\n>>> a.keys()\ndict_keys(['one', 'two', 'three'])\n>>> a.values()\ndict_values([1, 2, 3])\n>>> a.update({\"four\": 4})\n>>> a.keys()\ndict_keys(['one', 'two', 'three', 'four'])\n>>> a['four']\n4\n```\n\n### Casting\n\n#### Integers\n\n```python\nx = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n```\n\n#### Floats\n\n```python\nx = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\n```\n\n#### Strings\n\n```python\nx = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'\n```"
                },
                {
                    "title": "Python Advanced Data Types",
                    "content": "### Heaps\n\n```python\nimport heapq\n\nmyList = [9, 5, 4, 1, 3, 2]\nheapq.heapify(myList) # turn myList into a Min Heap\nprint(myList)    # => [1, 3, 2, 5, 9, 4]\nprint(myList[0]) # first value is always the smallest in the heap\n\nheapq.heappush(myList, 10) # insert 10\nx = heapq.heappop(myList)  # pop and return smallest item\nprint(x)                   # => 1\n```\n\n#### Negate all values to use Min Heap as Max Heap \n\n```python\nmyList = [9, 5, 4, 1, 3, 2]\nmyList = [-val for val in myList] # multiply by -1 to negate\nheapq.heapify(myList)\n\nx = heapq.heappop(myList)\nprint(-x) # => 9 (making sure to multiply by -1 again)\n```\n\nHeaps are binary trees for which every parent node has a value less than or equal to any of its children. Useful for accessing min/max value quickly. Time complexity: O(n) for heapify, O(log n) push and pop. See: [Heapq](https://docs.python.org/3/library/heapq.html)\n\n### Stacks and Queues\n\n```python\nfrom collections import deque\n\nq = deque()          # empty\nq = deque([1, 2, 3]) # with values\n\nq.append(4)     # append to right side\nq.appendleft(0) # append to left side\nprint(q)    # => deque([0, 1, 2, 3, 4])\n\nx = q.pop() # remove & return from right\ny = q.popleft() # remove & return from left\nprint(x)    # => 4\nprint(y)    # => 0\nprint(q)    # => deque([1, 2, 3])\n\nq.rotate(1) # rotate 1 step to the right\nprint(q)    # => deque([3, 1, 2])\n```\n\nDeque is a double-ended queue with O(1) time for append/pop operations from both sides. Used as stacks and queues. See: [Deque](https://docs.python.org/3/library/collections.html#collections.deque)"
                },
                {
                    "title": "Python Strings",
                    "content": "### Array-like\n\nGet the character at position 1 or last\n\n```python\n>>> hello = \"Hello, World\"\n>>> print(hello[1])\ne\n>>> print(hello[-1])\nd\n```\n\n\n### Looping\n\nLoop through the letters in the word \"foo\"\n\n```python\n>>> for char in \"foo\":\n...     print(char)\nf\no\no\n```\n\n### Slicing string\n\n```java\n \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n | m | y | b | a | c | o | n |\n \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n 0   1   2   3   4   5   6   7\n-7  -6  -5  -4  -3  -2  -1\n```\n\n---\n\n```python\n>>> s = 'mybacon'\n>>> s[2:5]\n'bac'\n>>> s[0:2]\n'my'\n```\n\n\n```python\n>>> s = 'mybacon'\n>>> s[:2]\n'my'\n>>> s[2:]\n'bacon'\n>>> s[:2] + s[2:]\n'mybacon'\n>>> s[:]\n'mybacon'\n```\n\n\n```python\n>>> s = 'mybacon'\n>>> s[-5:-1]\n'baco'\n>>> s[2:6]\n'baco'\n```\n\n\n#### With a stride\n\n```python\n>>> s = '12345' * 5\n>>> s\n'1234512345123451234512345'\n>>> s[::5]\n'11111'\n>>> s[4::5]\n'55555'\n>>> s[::-5]\n'55555'\n>>> s[::-1]\n'5432154321543215432154321'\n```\n### String Length\n\nThe len() function returns the length of a string\n\n```python\n>>> hello = \"Hello, World!\"\n>>> print(len(hello))\n13\n```\n\n### Multiple copies\n\n```python\n>>> s = '===+'\n>>> n = 8\n>>> s * n\n'===+===+===+===+===+===+===+===+'\n```\n\n### Check String\n\n```python\n>>> s = 'spam'\n>>> s in 'I saw spamalot!'\nTrue\n>>> s not in 'I saw The Holy Grail!'\nTrue\n```\n\n### Concatenates\n\n```python\n>>> s = 'spam'\n>>> t = 'egg'\n>>> s + t\n'spamegg'\n>>> 'spam' 'egg'\n'spamegg'\n```\n\n### Formatting\n\n```python\nname = \"John\"\nprint(\"Hello, %s!\" % name)\n```\n\n```python\nname = \"John\"\nage = 23\nprint(\"%s is %d years old.\" % (name, age))\n```\n\n#### format() Method\n\n```python\ntxt1 = \"My name is {fname}, I'm {age}\".format(fname=\"John\", age=36)\ntxt2 = \"My name is {0}, I'm {1}\".format(\"John\", 36)\ntxt3 = \"My name is {}, I'm {}\".format(\"John\", 36)\n```\n\n### Input\n\n```python\n>>> name = input(\"Enter your name: \")\nEnter your name: Tom\n>>> name\n'Tom'\n```\n\nGet input data from console\n\n\n### Join\n\n```python\n>>> \"#\".join([\"John\", \"Peter\", \"Vicky\"])\n'John#Peter#Vicky'\n```\n\n### Endswith\n\n```python\n>>> \"Hello, world!\".endswith(\"!\")\nTrue\n```"
                },
                {
                    "title": "Python F-Strings (Since Python 3.6+)",
                    "content": "### f-Strings usage\n\n```python\n>>> website = 'Quickref.ME'\n>>> f\"Hello, {website}\"\n\"Hello, Quickref.ME\"\n\n>>> num = 10\n>>> f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n\n>>> f\"\"\"He said {\"I'm John\"}\"\"\"\n\"He said I'm John\"\n\n>>> f'5 {\"{stars}\"}'\n'5 {stars}'\n>>> f'{{5}} {\"stars\"}'\n'{5} stars'\n\n>>> name = 'Eric'\n>>> age = 27\n>>> f\"\"\"Hello!\n...     I'm {name}.\n...     I'm {age}.\"\"\"\n\"Hello!\\n    I'm Eric.\\n    I'm 27.\"\n```\n\nit is available since Python 3.6, also see: [Formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)\n\n### f-Strings Fill Align\n\n```python\n>>> f'{\"text\":10}'     # [width]\n'text      '\n>>> f'{\"test\":*>10}'   # fill left\n'******test'\n>>> f'{\"test\":*<10}'   # fill right\n'test******'\n>>> f'{\"test\":*^10}'   # fill center\n'***test***'\n>>> f'{12345:0>10}'    # fill with numbers\n'0000012345'\n```\n\n### f-Strings Type\n\n```python\n>>> f'{10:b}'        # binary type\n'1010'\n>>> f'{10:o}'        # octal type\n'12'\n>>> f'{200:x}'       # hexadecimal type\n'c8'\n>>> f'{200:X}'\n'C8'\n>>> f'{345600000000:e}' # scientific notation\n'3.456000e+11'\n>>> f'{65:c}'       # character type\n'A'\n>>> f'{10:#b}'      # [type] with notation (base)\n'0b1010'\n>>> f'{10:#o}'\n'0o12'\n>>> f'{10:#x}'\n'0xa'\n```\n\n### F-Strings Others\n\n```python\n>>> f'{-12345:0=10}'  # negative numbers\n'-000012345'\n>>> f'{12345:010}'    # [0] shortcut (no align)\n'0000012345'\n>>> f'{-12345:010}'\n'-000012345'\n>>> import math       # [.precision]\n>>> math.pi\n3.141592653589793\n>>> f'{math.pi:.2f}'\n'3.14'\n>>> f'{1000000:,.2f}' # [grouping_option]\n'1,000,000.00'\n>>> f'{1000000:_.2f}'\n'1_000_000.00'\n>>> f'{0.25:0%}'      # percentage\n'25.000000%'\n>>> f'{0.25:.0%}'\n'25%'\n```\n\n### F-Strings Sign\n\n```python\n>>> f'{12345:+}'     # [sign] (+/-)\n'+12345'\n>>> f'{-12345:+}'\n'-12345'\n>>> f'{-12345:+10}'\n'    -12345'\n>>> f'{-12345:+010}'\n'-000012345'\n```"
                },
                {
                    "title": "Python Lists",
                    "content": "### Defining\n\n```python\n>>> li1 = []\n>>> li1\n[]\n>>> li2 = [4, 5, 6]\n>>> li2\n[4, 5, 6]\n>>> li3 = list((1, 2, 3))\n>>> li3\n[1, 2, 3]\n>>> li4 = list(range(1, 11))\n>>> li4\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n### Generate\n\n```python\n>>> list(filter(lambda x : x % 2 == 1, range(1, 20)))\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n>>> [x ** 2 for x in range (1, 11) if  x % 2 == 1]\n[1, 9, 25, 49, 81]\n\n>>> [x for x in [3, 4, 5, 6, 7] if x > 5]\n[6, 7]\n\n>>> list(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))\n[6, 7]\n```\n\n### Append\n\n```python\n>>> li = []\n>>> li.append(1)\n>>> li\n[1]\n>>> li.append(2)\n>>> li\n[1, 2]\n>>> li.append(4)\n>>> li\n[1, 2, 4]\n>>> li.append(3)\n>>> li\n[1, 2, 4, 3]\n```\n\n### List Slicing\n\nSyntax of list slicing:\n\n```python\na_list[start:end]\na_list[start:end:step]\n```\n#### Slicing\n\n```python\n>>> a = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[2:5]\n['bacon', 'tomato', 'ham']\n>>> a[-5:-2]\n['egg', 'bacon', 'tomato']\n>>> a[1:4]\n['egg', 'bacon', 'tomato']\n```\n\n#### Omitting index\n\n```python\n>>> a[:4]\n['spam', 'egg', 'bacon', 'tomato']\n>>> a[0:4]\n['spam', 'egg', 'bacon', 'tomato']\n>>> a[2:]\n['bacon', 'tomato', 'ham', 'lobster']\n>>> a[2:len(a)]\n['bacon', 'tomato', 'ham', 'lobster']\n>>> a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[:]\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n```\n\n#### With a stride\n\n```python\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[0:6:2]\n['spam', 'bacon', 'ham']\n>>> a[1:6:2]\n['egg', 'tomato', 'lobster']\n>>> a[6:0:-2]\n['lobster', 'tomato', 'egg']\n>>> a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n>>> a[::-1]\n['lobster', 'ham', 'tomato', 'bacon', 'egg', 'spam']\n```\n\n### Remove\n\n```python\n>>> li = ['bread', 'butter', 'milk']\n>>> li.pop()\n'milk'\n>>> li\n['bread', 'butter']\n>>> del li[0]\n>>> li\n['butter']\n```\n\n### Access\n\n```python\n>>> li = ['a', 'b', 'c', 'd']\n>>> li[0]\n'a'\n>>> li[-1]\n'd'\n>>> li[4]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```\n\n### Concatenating\n\n```python\n>>> odd = [1, 3, 5]\n>>> odd.extend([9, 11, 13])\n>>> odd\n[1, 3, 5, 9, 11, 13]\n>>> odd = [1, 3, 5]\n>>> odd + [9, 11, 13]\n[1, 3, 5, 9, 11, 13]\n```\n\n### Sort & Reverse\n\n```python\n>>> li = [3, 1, 3, 2, 5]\n>>> li.sort()\n>>> li\n[1, 2, 3, 3, 5]\n>>> li.reverse()\n>>> li\n[5, 3, 3, 2, 1]\n```\n\n### Count\n\n```python\n>>> li = [3, 1, 3, 2, 5]\n>>> li.count(3)\n2\n```\n\n### Repeating\n\n```python\n>>> li = [\"re\"] * 3\n>>> li\n['re', 're', 're']\n```"
                },
                {
                    "title": "Python Flow control",
                    "content": "### Basic\n\n```python\nnum = 5\nif num > 10:\n    print(\"num is totally bigger than 10.\")\nelif num < 10:\n    print(\"num is smaller than 10.\")\nelse:\n    print(\"num is indeed 10.\")\n```\n\n### One line\n```python\n>>> a = 330\n>>> b = 200\n>>> r = \"a\" if a > b else \"b\"\n>>> print(r)\na\n```\n\n### else if\n\n```python\nvalue = True\nif not value:\n    print(\"Value is False\")\nelif value is None:\n    print(\"Value is None\")\nelse:\n    print(\"Value is True\")\n```\n\n### match case\n\n```python\nx = 1\nmatch x:\n  case 0:\n    print(\"zero\")\n  case 1:\n    print(\"one\")\n  case _:\n    print(\"multiple\")\n```"
                },
                {
                    "title": "Python Loops",
                    "content": "### Basic\n\n```python\nprimes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n```\nPrints: 2 3 5 7\n\n\n### With index\n\n```python\nanimals = [\"dog\", \"cat\", \"mouse\"]\n# enumerate() adds counter to an iterable\nfor i, value in enumerate(animals):\n    print(i, value)\n```\nPrints: 0 dog 1 cat 2 mouse\n\n### While\n\n```python\nx = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n```\nPrints: 0 1 2 3\n\n### Break\n\n```python\nx = 0\nfor index in range(10):\n    x = index * 10\n    if index == 5:\n    \tbreak\n    print(x)\n```\nPrints: 0 10 20 30 40\n\n\n\n### Continue\n\n```python\nfor index in range(3, 8): \n    x = index * 10\n    if index == 5:\n    \tcontinue\n    print(x)\n```\nPrints: 30 40 60 70\n\n\n\n### Range\n\n```python\nfor i in range(4):\n    print(i) # Prints: 0 1 2 3\n\nfor i in range(4, 8):\n    print(i) # Prints: 4 5 6 7\n\nfor i in range(4, 10, 2):\n    print(i) # Prints: 4 6 8\n```\n\n### With zip()\n\n```python\nwords = ['Mon', 'Tue', 'Wed']\nnums = [1, 2, 3]\n# Use zip to pack into a tuple list\nfor w, n in zip(words, nums):\n    print('%d:%s, ' %(n, w))\n```\nPrints: 1:Mon, 2:Tue, 3:Wed,\n\n\n### for/else\n\n```python\nnums = [60, 70, 30, 110, 90]\nfor n in nums:\n    if n > 100:\n        print(\"%d is bigger than 100\" %n)\n        break\nelse:\n    print(\"Not found!\")\n```\nAlso see: [Python Tips](https://book.pythontips.com/en/latest/for_-_else.html)"
                },
                {
                    "title": "Python Functions",
                    "content": "### Basic\n\n```python\ndef hello_world():  \n    print('Hello, World!')\n```\n\n### Return\n\n```python\ndef add(x, y):\n    print(\"x is %s, y is %s\" %(x, y))\n    return x + y\n\nadd(5, 6)    # => 11\n```\n\n### Positional arguments\n\n```python\ndef varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # => (1, 2, 3)\n```\n\nType of \"args\" is tuple.\n\n### Keyword arguments\n\n```python\ndef keyword_args(**kwargs):\n    return kwargs\n\n# => {\"big\": \"foot\", \"loch\": \"ness\"}\nkeyword_args(big=\"foot\", loch=\"ness\")\n```\n\nType of \"kwargs\" is dict.\n\n### Returning multiple\n\n```python\ndef swap(x, y):\n    return y, x\n\nx = 1\ny = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n```\n\n### Default Value\n\n```python\ndef add(x, y=10):\n    return x + y\n\nadd(5)      # => 15\nadd(5, 20)  # => 25\n```\n\n### Anonymous functions\n\n```python\n# => True\n(lambda x: x > 2)(3)\n\n# => 5\n(lambda x, y: x ** 2 + y ** 2)(2, 1)\n```"
                },
                {
                    "title": "Python Modules",
                    "content": "### Import modules\n\n```python\nimport math\nprint(math.sqrt(16))  # => 4.0\n```\n\n### From a module\n\n```python\nfrom math import ceil, floor\nprint(ceil(3.7))   # => 4.0\nprint(floor(3.7))  # => 3.0\n```\n\n### Import all\n\n```python\nfrom math import *\n```\n\n### Shorten module \n\n```python\nimport math as m\n\n# => True\nmath.sqrt(16) == m.sqrt(16)\n```\n\n### Functions and attributes\n\n```python\nimport math\ndir(math)\n```"
                },
                {
                    "title": "Python File Handling",
                    "content": "### Read file\n\n#### Line by line\n\n```python\nwith open(\"myfile.txt\") as file:\n    for line in file:\n        print(line)\n```\n#### With line number\n```python\nfile = open('myfile.txt', 'r')\nfor i, line in enumerate(file, start=1):\n    print(\"Number %s: %s\" % (i, line))\n```\n\n### String\n\n#### Write a string\n\n```python\ncontents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))\n```\n\n#### Read a string\n\n```python\nwith open('myfile1.txt', \"r+\") as file:\n    contents = file.read()\nprint(contents)\n```\n\n### Object\n\n#### Write an object\n\n```python\ncontents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))\n```\n\n#### Read an object\n\n```python\nwith open('myfile2.txt', \"r+\") as file:\n    contents = json.load(file)\nprint(contents)\n```\n\n### Delete a File\n\n```python\nimport os\nos.remove(\"myfile.txt\")\n```\n\n### Check and Delete\n\n```python\nimport os\nif os.path.exists(\"myfile.txt\"):\n    os.remove(\"myfile.txt\")\nelse:\n    print(\"The file does not exist\")\n```\n\n### Delete Folder\n\n```python\nimport os\nos.rmdir(\"myfolder\")\n```"
                },
                {
                    "title": "Python Classes & Inheritance",
                    "content": "### Defining\n\n```python\nclass MyNewClass:\n    pass\n\n# Class Instantiation\nmy = MyNewClass()\n```\n\n### Constructors\n\n```python\nclass Animal:\n    def __init__(self, voice):\n        self.voice = voice\n \ncat = Animal('Meow')\nprint(cat.voice)    # => Meow\n \ndog = Animal('Woof') \nprint(dog.voice)    # => Woof\n```\n\n### Method\n\n```python\nclass Dog:\n\n    # Method of the class\n    def bark(self):\n        print(\"Ham-Ham\")\n \ncharlie = Dog()\ncharlie.bark()   # => \"Ham-Ham\"\n```\n\n### Class Variables\n\n```python\nclass MyClass:\n    class_variable = \"A class variable!\"\n\n# => A class variable!\nprint(MyClass.class_variable)\n\nx = MyClass()\n \n# => A class variable!\nprint(x.class_variable)\n```\n\n### Super() Function\n\n```python\nclass ParentClass:\n    def print_test(self):\n        print(\"Parent Method\")\n \nclass ChildClass(ParentClass):\n    def print_test(self):\n        print(\"Child Method\")\n        # Calls the parent's print_test()\n        super().print_test() \n```\n\n--- \n\n```python\n>>> child_instance = ChildClass()\n>>> child_instance.print_test()\nChild Method\nParent Method\n```\n\n### repr() method\n\n```python\nclass Employee:\n    def __init__(self, name):\n        self.name = name\n \n    def __repr__(self):\n        return self.name\n \njohn = Employee('John')\nprint(john)  # => John\n```\n\n### User-defined exceptions\n\n```python\nclass CustomError(Exception):\n    pass\n```\n\n### Polymorphism\n\n```python\nclass ParentClass:\n    def print_self(self):\n        print('A')\n \nclass ChildClass(ParentClass):\n    def print_self(self):\n        print('B')\n \nobj_A = ParentClass()\nobj_B = ChildClass()\n \nobj_A.print_self() # => A\nobj_B.print_self() # => B\n```\n\n### Overriding \n\n```python\nclass ParentClass:\n    def print_self(self):\n        print(\"Parent\")\n \nclass ChildClass(ParentClass):\n    def print_self(self):\n        print(\"Child\")\n \nchild_instance = ChildClass()\nchild_instance.print_self() # => Child\n```\n\n### Inheritance\n\n```python\nclass Animal: \n    def __init__(self, name, legs):\n        self.name = name\n        self.legs = legs\n        \nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n \nYoki = Dog(\"Yoki\", 4)\nprint(Yoki.name) # => YOKI\nprint(Yoki.legs) # => 4\nYoki.sound()     # => Woof!\n```"
                },
                {
                    "title": "Python Type Hints (Since Python 3.5)",
                    "content": "### Variable & Parameter\n\n```python\nstring: str = \"ha\"\ntimes: int = 3\n\n# wrong hit, but run correctly\nresult: str = 1 + 2\nprint(result)  # => 3\n\n\ndef say(name: str, start: str = \"Hi\"):\n    return start + \", \" + name\n\nprint(say(\"Python\"))  # => Hi, Python\n```\n\n\n### Built-in date type\n\n```python\nfrom typing import Dict, Tuple, List\n\nbill: Dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: Tuple[str] = (\"DONE\",)\nsucceeded: Tuple[int, str] = (1, \"SUCCESS\")\nstatuses: Tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: List[int] = (0, 1, -1, -2)\n```\n\n### Built-in date type (3.10+)\n\n```python\nbill: dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: tuple[str] = (\"DONE\",)\nsucceeded: tuple[int, str] = (1, \"SUCCESS\")\nstatuses: tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: list[int] = (0, 1, -1, -2)\n```\n\n### Positional argument\n\n```python\ndef calc_summary(*args: int):\n    return sum(args)\n\nprint(calc_summary(3, 1, 4))  # => 8\n```\n\nIndicate all arguments' type is int.\n\n### Returned\n\n```python\ndef say_hello(name) -> str:\n    return \"Hello, \" + name\n\nvar = \"Python\"\nprint(say_hello(var))  # => Hello, Python\n```\n\n### Union returned\n\n```python\nfrom typing import Union\n\ndef resp200(meaningful) -> Union[int, str]:\n    return \"OK\" if meaningful else 200\n```\n\nMeans returned value type may be int or str.\n\n### Keyword argument\n\n```python\ndef calc_summary(**kwargs: int):\n    return sum(kwargs.values())\n\nprint(calc_summary(a=1, b=2))  # => 3\n```\n\nIndicate all parameters' value type is int.\n\n\n### Multiple returns\n\n```python\ndef resp200() -> (int, str):\n    return 200, \"OK\"\n\nreturns = resp200()\nprint(returns)  # => (200, 'OK')\nprint(type(returns))  # tuple\n```\n\n### Union returned (3.10+)\n\n```python\ndef resp200(meaningful) -> int | str:\n    return \"OK\" if meaningful else 200\n```\n\nSince Python 3.10\n\n### Property\n\n```python\nclass Employee:\n    name: str\n    age: int\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.graduated: bool = False\n```\n\n\n### Self instance\n\n```python\nclass Employee:\n    name: str\n\n    def set_name(self, name) -> \"Employee\":\n        self.name = name\n        return self\n\n    def copy(self) -> 'Employee':\n        return type(self)(self.name)\n```\n\n### Self instance (3.11+)\n\n```python\nfrom typing import Self\n\nclass Employee:\n    name: str\n    age: int\n\n    def set_name(self: Self, name) -> Self:\n        self.name = name\n        return self\n```\n\n\n### Type & Generic\n\n```python\nfrom typing import TypeVar, Type\n\nT = TypeVar(\"T\")\n\n# \"mapper\" is a type, like int, str, MyClass and so on.\n# \"default\" is an instance of type T, such as 314, \"string\", MyClass() and so on.\n# returned is an instance of type T too.\ndef converter(raw, mapper: Type[T], default: T) -> T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\nraw: str = input(\"Enter an integer: \")\nresult: int = converter(raw, mapper=int, default=0)\n```\n\n### Function\n\n```python\nfrom typing import TypeVar, Callable, Any\n\nT = TypeVar(\"T\")\n\ndef converter(raw, mapper: Callable[[Any], T], default: T) -> T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\n# Callable[[Any], ReturnType] means a function declare like:\n# def func(arg: Any) -> ReturnType:\n#     pass\n\n# Callable[[str, int], ReturnType] means a function declare like:\n# def func(string: str, times: int) -> ReturnType:\n#     pass\n\n# Callable[..., ReturnType] means a function declare like:\n# def func(*args, **kwargs) -> ReturnType:\n#     pass\n\ndef is_success(value) -> bool:\n    return value in (0, \"OK\", True, \"success\")\n\nresp = dict(code=0, message=\"OK\", data=[])\nsuccessed: bool = converter(resp.message, mapper=is_success, default=False)\n```"
                },
                {
                    "title": "Miscellaneous",
                    "content": "### Comments\n\n```python\n# This is a single line comments.\n```\n\n```python\n\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as documentation.\n\"\"\"\n```\n```python\n''' Multiline strings can be written\n    using three 's, and are often used\n    as documentation.\n'''\n```\n\n### Generators\n\n```python\ndef double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n```\n\nGenerators help you make lazy code.\n\n### Generator to list\n\n```python\nvalues = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\n\n# => [-1, -2, -3, -4, -5]\nprint(gen_to_list)\n```\n\n### Handle exceptions\n\n```python\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be handled together, if required.\nelse:                    # Optional clause to the try/except block. Must follow all except blocks\n    print(\"All good!\")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print(\"We can clean up resources here\")\n```"
                }
            ]
        }
    ]
}